/*
 Navicat Premium Data Transfer

 Source Server         : jsfnsc
 Source Server Type    : MySQL
 Source Server Version : 80026 (8.0.26)
 Source Host           : localhost:3306
 Source Schema         : fp_detection

 Target Server Type    : MySQL
 Target Server Version : 80026 (8.0.26)
 File Encoding         : 65001

 Date: 01/03/2023 22:22:08
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for a_rule
-- ----------------------------
DROP TABLE IF EXISTS `a_rule`;
CREATE TABLE `a_rule` (
  `id` int NOT NULL AUTO_INCREMENT,
  `rule_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `type_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `priority` int DEFAULT NULL,
  `category` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `class_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `method_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `line_length` int DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `state` int DEFAULT NULL,
  `version_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `version_id` (`version_id`) USING BTREE,
  CONSTRAINT `a_rule_ibfk_1` FOREIGN KEY (`version_id`) REFERENCES `a_version` (`version_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of a_rule
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for a_template
-- ----------------------------
DROP TABLE IF EXISTS `a_template`;
CREATE TABLE `a_template` (
  `template_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `template_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `file_path` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `state` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`template_id`) USING BTREE,
  KEY `user_id` (`user_id`) USING BTREE,
  CONSTRAINT `a_template_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `a_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of a_template
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for a_user
-- ----------------------------
DROP TABLE IF EXISTS `a_user`;
CREATE TABLE `a_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of a_user
-- ----------------------------
BEGIN;
INSERT INTO `a_user` (`id`, `username`, `password`) VALUES (1, 'jsfnsc', '1234');
COMMIT;

-- ----------------------------
-- Table structure for a_user_info
-- ----------------------------
DROP TABLE IF EXISTS `a_user_info`;
CREATE TABLE `a_user_info` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int DEFAULT NULL,
  `telephone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `user_id` (`user_id`) USING BTREE,
  CONSTRAINT `a_user_info_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `a_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of a_user_info
-- ----------------------------
BEGIN;
INSERT INTO `a_user_info` (`id`, `user_id`, `telephone`, `email`) VALUES (1, 1, '10000', '123@nju.edu.cn');
COMMIT;

-- ----------------------------
-- Table structure for a_version
-- ----------------------------
DROP TABLE IF EXISTS `a_version`;
CREATE TABLE `a_version` (
  `version_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `version_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `class_file_path` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `java_file_path` varchar(255) DEFAULT NULL,
  `jar_file_path` varchar(255) DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `project_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `last_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`version_id`) USING BTREE,
  KEY `project_id` (`project_id`) USING BTREE,
  CONSTRAINT `a_version_ibfk_1` FOREIGN KEY (`project_id`) REFERENCES `project` (`project_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of a_version
-- ----------------------------
BEGIN;
INSERT INTO `a_version` (`version_id`, `version_name`, `class_file_path`, `java_file_path`, `jar_file_path`, `create_time`, `project_id`, `last_id`) VALUES ('c725069d9bb14a889d1e0f5a79796b21', 'dev', NULL, NULL, NULL, '2023-02-26 21:07:52', 'b3f09e16ab4d4647920d117fcad99e12', NULL);
COMMIT;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `id` int NOT NULL,
  `category_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `likelihood` int DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of category
-- ----------------------------
BEGIN;
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (1, 'BAD_PRACTICE', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (2, 'STYLE', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (3, 'MALICIOUS_CODE', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (4, 'CORRECTNESS', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (5, 'MT_CORRECTNESS', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (6, 'PERFORMANCE', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (7, 'I18N', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (8, 'SECURITY', 0);
INSERT INTO `category` (`id`, `category_name`, `likelihood`) VALUES (9, 'EXPERRIMENTAL', 0);
COMMIT;

-- ----------------------------
-- Table structure for knowledge
-- ----------------------------
DROP TABLE IF EXISTS `knowledge`;
CREATE TABLE `knowledge` (
  `knowledge_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `knowledge_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `pattern_id` int DEFAULT NULL,
  PRIMARY KEY (`knowledge_id`) USING BTREE,
  KEY `pattern_id` (`pattern_id`) USING BTREE,
  CONSTRAINT `knowledge_ibfk_1` FOREIGN KEY (`pattern_id`) REFERENCES `pattern` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of knowledge
-- ----------------------------
BEGIN;
INSERT INTO `knowledge` (`knowledge_id`, `knowledge_name`, `content`, `create_time`, `pattern_id`) VALUES ('cf806de8c8dc4f20b6f96f81fef9adee', '知识1', '该漏洞类型下的警报为误报的概率较大', '2022-10-31 06:44:29', 418);
COMMIT;

-- ----------------------------
-- Table structure for pattern
-- ----------------------------
DROP TABLE IF EXISTS `pattern`;
CREATE TABLE `pattern` (
  `id` int NOT NULL AUTO_INCREMENT,
  `pattern_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `category_id` int DEFAULT NULL,
  `t_num` int(11) unsigned zerofill DEFAULT NULL,
  `f_num` int(11) unsigned zerofill DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `category_id` (`category_id`) USING BTREE,
  CONSTRAINT `pattern_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=429 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of pattern
-- ----------------------------
BEGIN;
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (1, 'BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (2, 'BIT_SIGNED_CHECK', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (3, 'CN_IDIOM', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (4, 'CN_IDIOM_NO_SUPER_CALL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (5, 'CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (6, 'CNT_ROUGH_CONSTANT_VALUE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (7, 'CO_ABSTRACT_SELF', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (8, 'CO_COMPARETO_INCORRECT_FLOATING', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (9, 'CO_COMPARETO_RESULTS_MIN_VALUE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (10, 'CO_SELF_NO_OBJECT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (11, 'DE_MIGHT_DROP', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (12, 'DE_MIGHT_IGNORE', 1, 00000000000, 00000000017);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (13, 'DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (14, 'DMI_RANDOM_USED_ONLY_ONCE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (15, 'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (16, 'DM_EXIT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (17, 'DM_RUN_FINALIZERS_ON_EXIT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (18, 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 1, 00000000000, 00000000006);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (19, 'ES_COMPARING_STRINGS_WITH_EQ', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (20, 'EQ_ABSTRACT_SELF', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (21, 'EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (22, 'EQ_COMPARETO_USE_OBJECT_EQUALS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (23, 'EQ_GETCLASS_AND_CLASS_CONSTANT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (24, 'EQ_SELF_NO_OBJECT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (25, 'FI_EMPTY', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (26, 'FI_EXPLICIT_INVOCATION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (27, 'FI_FINALIZER_NULLS_FIELDS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (28, 'FI_FINALIZER_ONLY_NULLS_FIELDS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (29, 'FI_MISSING_SUPER_CALL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (30, 'FI_NULLIFY_SUPER', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (31, 'FI_USELESS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (32, 'VA_FORMAT_STRING_USES_NEWLINE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (33, 'GC_UNCHECKED_TYPE_IN_GENERIC_CALL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (34, 'HE_EQUALS_NO_HASHCODE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (35, 'HE_EQUALS_USE_HASHCODE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (36, 'HE_HASHCODE_NO_EQUALS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (37, 'HE_HASHCODE_USE_OBJECT_EQUALS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (38, 'HE_INHERITS_EQUALS_USE_HASHCODE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (39, 'IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (40, 'IMSE_DONT_CATCH_IMSE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (41, 'ISC_INSTANTIATE_STATIC_CLASS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (42, 'IT_NO_SUCH_ELEMENT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (43, 'J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (44, 'JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (45, 'ME_ENUM_FIELD_SETTER', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (46, 'ME_MUTABLE_ENUM_FIELD', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (47, 'NP_BOOLEAN_RETURN_NULL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (48, 'NP_CLONE_COULD_RETURN_NULL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (49, 'NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (50, 'NP_TOSTRING_COULD_RETURN_NULL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (51, 'NM_CLASS_NAMING_CONVENTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (52, 'NM_CLASS_NOT_EXCEPTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (53, 'NM_CONFUSING', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (54, 'NM_FIELD_NAMING_CONVENTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (55, 'NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (56, 'NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (57, 'NM_METHOD_NAMING_CONVENTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (58, 'NM_SAME_SIMPLE_NAME_AS_INTERFACE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (59, 'NM_SAME_SIMPLE_NAME_AS_SUPERCLASS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (60, 'NM_VERY_CONFUSING_INTENTIONAL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (61, 'NM_WRONG_PACKAGE_INTENTIONAL', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (62, 'ODR_OPEN_DATABASE_RESOURCE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (63, 'ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (64, 'OS_OPEN_STREAM', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (65, 'OS_OPEN_STREAM_EXCEPTION_PATH', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (66, 'PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (67, 'RC_REF_COMPARISON_BAD_PRACTICE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (68, 'RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (69, 'RR_NOT_CHECKED', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (70, 'SR_NOT_CHECKED', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (71, 'RV_NEGATING_RESULT_OF_COMPARETO', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (72, 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 1, 00000000002, 00000000172);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (73, 'SI_INSTANCE_BEFORE_FINALS_ASSIGNED', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (74, 'SW_SWING_METHODS_INVOKED_IN_SWING_THREAD', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (75, 'SE_BAD_FIELD', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (76, 'SE_BAD_FIELD_INNER_CLASS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (77, 'SE_BAD_FIELD_STORE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (78, 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 1, 00000000000, 00000000016);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (79, 'SE_INNER_CLASS', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (80, 'SE_NONFINAL_SERIALVERSIONID', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (81, 'SE_NONLONG_SERIALVERSIONID', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (82, 'SE_NONSTATIC_SERIALVERSIONID', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (83, 'SE_NO_SUITABLE_CONSTRUCTOR', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (84, 'SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (85, 'SE_READ_RESOLVE_MUST_RETURN_OBJECT', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (86, 'SE_TRANSIENT_FIELD_NOT_RESTORED', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (87, 'SE_NO_SERIALVERSIONID', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (88, 'UI_INHERITANCE_UNSAFE_GETRESOURCE', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (89, 'BC_IMPOSSIBLE_CAST', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (90, 'BC_IMPOSSIBLE_DOWNCAST', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (91, 'BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (92, 'BC_IMPOSSIBLE_INSTANCEOF', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (93, 'BIT_ADD_OF_SIGNED_BYTE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (94, 'BIT_AND', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (95, 'BIT_AND_ZZ', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (96, 'BIT_IOR', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (97, 'BIT_IOR_OF_SIGNED_BYTE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (98, 'BIT_SIGNED_CHECK_HIGH_BIT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (99, 'BOA_BADLY_OVERRIDDEN_ADAPTER', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (100, 'BSHIFT_WRONG_ADD_PRIORITY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (101, 'ICAST_BAD_SHIFT_AMOUNT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (102, 'DLS_DEAD_LOCAL_INCREMENT_IN_RETURN', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (103, 'DLS_DEAD_STORE_OF_CLASS_LITERAL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (104, 'DLS_OVERWRITTEN_INCREMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (105, 'DMI_ARGUMENTS_WRONG_ORDER', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (106, 'DMI_BAD_MONTH', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (107, 'DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (108, 'DMI_CALLING_NEXT_FROM_HASNEXT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (109, 'DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (110, 'DMI_DOH', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (111, 'DMI_INVOKING_HASHCODE_ON_ARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (112, 'DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (113, 'DMI_VACUOUS_SELF_COLLECTION_CALL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (114, 'DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (115, 'DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (116, 'DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (117, 'DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (118, 'DM_INVALID_MIN_MAX', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (119, 'EC_ARRAY_AND_NONARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (120, 'EC_BAD_ARRAY_COMPARE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (121, 'EC_INCOMPATIBLE_ARRAY_COMPARE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (122, 'EC_NULL_ARG', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (123, 'EC_UNRELATED_CLASS_AND_INTERFACE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (124, 'EC_UNRELATED_INTERFACES', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (125, 'EC_UNRELATED_TYPES', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (126, 'EC_UNRELATED_TYPES_USING_POINTER_EQUALITY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (127, 'EQ_ALWAYS_FALSE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (128, 'EQ_ALWAYS_TRUE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (129, 'EQ_COMPARING_CLASS_NAMES', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (130, 'EQ_DONT_DEFINE_EQUALS_FOR_ENUM', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (131, 'EQ_OTHER_NO_OBJECT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (132, 'EQ_OTHER_USE_OBJECT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (133, 'EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (134, 'EQ_SELF_USE_OBJECT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (135, 'FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (136, 'VA_FORMAT_STRING_BAD_ARGUMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (137, 'VA_FORMAT_STRING_BAD_CONVERSION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (138, 'VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (139, 'VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (140, 'VA_FORMAT_STRING_ILLEGAL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (141, 'VA_FORMAT_STRING_MISSING_ARGUMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (142, 'VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (143, 'GC_UNRELATED_TYPES', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (144, 'HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (145, 'HE_USE_OF_UNHASHABLE_CLASS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (146, 'ICAST_INT_2_LONG_AS_INSTANT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (147, 'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (148, 'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (149, 'IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (150, 'IJU_BAD_SUITE_METHOD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (151, 'IJU_NO_TESTS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (152, 'IJU_SETUP_NO_SUPER', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (153, 'IJU_SUITE_NOT_STATIC', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (154, 'IJU_TEARDOWN_NO_SUPER', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (155, 'IL_CONTAINER_ADDED_TO_ITSELF', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (156, 'IL_INFINITE_LOOP', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (157, 'IL_INFINITE_RECURSIVE_LOOP', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (158, 'IM_MULTIPLYING_RESULT_OF_IREM', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (159, 'INT_BAD_COMPARISON_WITH_INT_VALUE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (160, 'INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (161, 'INT_BAD_COMPARISON_WITH_SIGNED_BYTE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (162, 'IO_APPENDING_TO_OBJECT_OUTPUT_STREAM', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (163, 'IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (164, 'MF_CLASS_MASKS_FIELD', 2, 00000000001, 00000000005);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (165, 'MF_METHOD_MASKS_FIELD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (166, 'NP_ALWAYS_NULL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (167, 'NP_ALWAYS_NULL_EXCEPTION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (168, 'NP_ARGUMENT_MIGHT_BE_NULL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (169, 'NP_CLOSING_NULL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (170, 'NP_GUARANTEED_DEREF', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (171, 'NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (172, 'NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (173, 'NP_NONNULL_PARAM_VIOLATION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (174, 'NP_NONNULL_RETURN_VIOLATION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (175, 'NP_NULL_INSTANCEOF', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (176, 'NP_NULL_ON_SOME_PATH', 2, 00000000000, 00000000004);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (177, 'NP_NULL_ON_SOME_PATH_EXCEPTION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (178, 'NP_NULL_PARAM_DEREF', 2, 00000000000, 00000000016);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (179, 'NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (180, 'NP_NULL_PARAM_DEREF_NONVIRTUAL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (181, 'NP_OPTIONAL_RETURN_NULL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (182, 'NP_STORE_INTO_NONNULL_FIELD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (183, 'NP_UNWRITTEN_FIELD', 2, 00000000001, 00000000021);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (184, 'NM_BAD_EQUAL', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (185, 'NM_LCASE_HASHCODE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (186, 'NM_LCASE_TOSTRING', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (187, 'NM_METHOD_CONSTRUCTOR_CONFUSION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (188, 'NM_VERY_CONFUSING', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (189, 'NM_WRONG_PACKAGE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (190, 'QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (191, 'RANGE_ARRAY_INDEX', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (192, 'RANGE_ARRAY_LENGTH', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (193, 'RANGE_ARRAY_OFFSET', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (194, 'RANGE_STRING_INDEX', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (195, 'RC_REF_COMPARISON', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (196, 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 2, 00000000000, 00000000006);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (197, 'RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (198, 'RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (199, 'RE_POSSIBLE_UNINTENDED_PATTERN', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (200, 'RV_01_TO_INT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (201, 'RV_ABSOLUTE_VALUE_OF_HASHCODE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (202, 'RV_ABSOLUTE_VALUE_OF_RANDOM_INT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (203, 'RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (204, 'RV_EXCEPTION_NOT_THROWN', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (205, 'RV_RETURN_VALUE_IGNORED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (206, 'RpC_REPEATED_CONDITIONAL_TEST', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (207, 'SA_FIELD_SELF_ASSIGNMENT', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (208, 'SA_FIELD_SELF_COMPARISON', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (209, 'SA_FIELD_SELF_COMPUTATION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (210, 'SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (211, 'SA_LOCAL_SELF_COMPARISON', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (212, 'SA_LOCAL_SELF_COMPUTATION', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (213, 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (214, 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (215, 'SIC_THREADLOCAL_DEADLY_EMBRACE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (216, 'SIO_SUPERFLUOUS_INSTANCEOF', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (217, 'SQL_BAD_PREPARED_STATEMENT_ACCESS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (218, 'SQL_BAD_RESULTSET_ACCESS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (219, 'STI_INTERRUPTED_ON_CURRENTTHREAD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (220, 'STI_INTERRUPTED_ON_UNKNOWNTHREAD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (221, 'SE_METHOD_MUST_BE_PRIVATE', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (222, 'SE_READ_RESOLVE_IS_STATIC', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (223, 'TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (224, 'TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (225, 'TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (226, 'TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (227, 'TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (228, 'TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (229, 'UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (230, 'UR_UNINIT_READ', 2, 00000000000, 00000000001);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (231, 'UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (232, 'DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (233, 'DMI_INVOKING_TOSTRING_ON_ARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (234, 'VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (235, 'UWF_NULL_FIELD', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (236, 'UWF_UNWRITTEN_FIELD', 2, 00000000003, 00000000059);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (237, 'VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG', 2, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (238, 'LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE', 3, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (239, 'OBL_UNSATISFIED_OBLIGATION', 3, 00000000001, 00000000001);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (240, 'OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE', 3, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (241, 'DM_CONVERT_CASE', 4, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (242, 'DM_DEFAULT_ENCODING', 4, 00000000005, 00000000025);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (243, 'DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (244, 'DP_DO_INSIDE_DO_PRIVILEGED', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (245, 'EI_EXPOSE_REP', 5, 00000000000, 00000000033);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (246, 'EI_EXPOSE_REP2', 5, 00000000000, 00000000034);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (247, 'FI_PUBLIC_SHOULD_BE_PROTECTED', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (248, 'EI_EXPOSE_STATIC_REP2', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (249, 'MS_CANNOT_BE_FINAL', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (250, 'MS_EXPOSE_REP', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (251, 'MS_FINAL_PKGPROTECT', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (252, 'MS_MUTABLE_ARRAY', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (253, 'MS_MUTABLE_COLLECTION', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (254, 'MS_MUTABLE_COLLECTION_PKGPROTECT', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (255, 'MS_MUTABLE_HASHTABLE', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (256, 'MS_OOI_PKGPROTECT', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (257, 'MS_PKGPROTECT', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (258, 'MS_SHOULD_BE_FINAL', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (259, 'MS_SHOULD_BE_REFACTORED_TO_BE_FINAL', 5, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (260, 'AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (261, 'DC_DOUBLECHECK', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (262, 'DC_PARTIALLY_CONSTRUCTED', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (263, 'DL_SYNCHRONIZATION_ON_BOOLEAN', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (264, 'DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (265, 'DL_SYNCHRONIZATION_ON_SHARED_CONSTANT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (266, 'DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (267, 'DM_MONITOR_WAIT_ON_CONDITION', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (268, 'DM_USELESS_THREAD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (269, 'ESync_EMPTY_SYNC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (270, 'IS2_INCONSISTENT_SYNC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (271, 'IS_FIELD_NOT_GUARDED', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (272, 'JLM_JSR166_LOCK_MONITORENTER', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (273, 'JLM_JSR166_UTILCONCURRENT_MONITORENTER', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (274, 'JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (275, 'LI_LAZY_INIT_STATIC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (276, 'LI_LAZY_INIT_UPDATE_STATIC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (277, 'ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (278, 'ML_SYNC_ON_UPDATED_FIELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (279, 'MSF_MUTABLE_SERVLET_FIELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (280, 'MWN_MISMATCHED_NOTIFY', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (281, 'MWN_MISMATCHED_WAIT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (282, 'NN_NAKED_NOTIFY', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (283, 'NP_SYNC_AND_NULL_CHECK_FIELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (284, 'NO_NOTIFY_NOT_NOTIFYALL', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (285, 'RS_READOBJECT_SYNC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (286, 'RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (287, 'RU_INVOKE_RUN', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (288, 'SC_START_IN_CTOR', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (289, 'SP_SPIN_ON_FIELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (290, 'STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (291, 'STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (292, 'STCAL_STATIC_CALENDAR_INSTANCE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (293, 'STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (294, 'SWL_SLEEP_WITH_LOCK_HELD', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (295, 'TLW_TWO_LOCK_WAIT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (296, 'UG_SYNC_SET_UNSYNC_GET', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (297, 'UL_UNRELEASED_LOCK', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (298, 'UL_UNRELEASED_LOCK_EXCEPTION_PATH', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (299, 'UW_UNCOND_WAIT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (300, 'VO_VOLATILE_INCREMENT', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (301, 'VO_VOLATILE_REFERENCE_TO_ARRAY', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (302, 'WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (303, 'WS_WRITEOBJECT_SYNC', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (304, 'WA_AWAIT_NOT_IN_LOOP', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (305, 'WA_NOT_IN_LOOP', 6, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (306, 'BX_BOXING_IMMEDIATELY_UNBOXED', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (307, 'BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (308, 'BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (309, 'BX_UNBOXING_IMMEDIATELY_REBOXED', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (310, 'DM_BOXED_PRIMITIVE_FOR_COMPARE', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (311, 'DM_BOXED_PRIMITIVE_FOR_PARSING', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (312, 'DM_BOXED_PRIMITIVE_TOSTRING', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (313, 'DM_FP_NUMBER_CTOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (314, 'DM_NUMBER_CTOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (315, 'DMI_BLOCKING_METHODS_ON_URL', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (316, 'DMI_COLLECTION_OF_URLS', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (317, 'DM_BOOLEAN_CTOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (318, 'DM_GC', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (319, 'DM_NEW_FOR_GETCLASS', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (320, 'DM_NEXTINT_VIA_NEXTDOUBLE', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (321, 'DM_STRING_CTOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (322, 'DM_STRING_TOSTRING', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (323, 'DM_STRING_VOID_CTOR', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (324, 'HSC_HUGE_SHARED_STRING_CONSTANT', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (325, 'SBSC_USE_STRINGBUFFER_CONCATENATION', 7, 00000000000, 00000000006);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (326, 'SIC_INNER_SHOULD_BE_STATIC', 7, 00000000003, 00000000015);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (327, 'SIC_INNER_SHOULD_BE_STATIC_ANON', 7, 00000000000, 00000000001);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (328, 'SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (329, 'SS_SHOULD_BE_STATIC', 7, 00000000000, 00000000006);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (330, 'UM_UNNECESSARY_MATH', 7, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (331, 'UPM_UNCALLED_PRIVATE_METHOD', 7, 00000000000, 00000000003);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (332, 'URF_UNREAD_FIELD', 7, 00000000000, 00000000024);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (333, 'UUF_UNUSED_FIELD', 7, 00000000000, 00000000001);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (334, 'WMI_WRONG_MAP_ITERATOR', 7, 00000000001, 00000000002);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (335, 'DMI_CONSTANT_DB_PASSWORD', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (336, 'DMI_EMPTY_DB_PASSWORD', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (337, 'HRS_REQUEST_PARAMETER_TO_COOKIE', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (338, 'HRS_REQUEST_PARAMETER_TO_HTTP_HEADER', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (339, 'PT_ABSOLUTE_PATH_TRAVERSAL', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (340, 'PT_RELATIVE_PATH_TRAVERSAL', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (341, 'SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (342, 'SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (343, 'XSS_REQUEST_PARAMETER_TO_JSP_WRITER', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (344, 'XSS_REQUEST_PARAMETER_TO_SEND_ERROR', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (345, 'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER', 8, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (346, 'BC_BAD_CAST_TO_ABSTRACT_COLLECTION', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (347, 'BC_BAD_CAST_TO_CONCRETE_COLLECTION', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (348, 'BC_UNCONFIRMED_CAST', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (349, 'BC_UNCONFIRMED_CAST_OF_RETURN_VALUE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (350, 'BC_VACUOUS_INSTANCEOF', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (351, 'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (352, 'CI_CONFUSED_INHERITANCE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (353, 'DB_DUPLICATE_BRANCHES', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (354, 'DB_DUPLICATE_SWITCH_CLAUSES', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (355, 'DLS_DEAD_LOCAL_STORE', 9, 00000000001, 00000000010);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (356, 'DLS_DEAD_LOCAL_STORE_IN_RETURN', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (357, 'DLS_DEAD_LOCAL_STORE_OF_NULL', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (358, 'DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (359, 'DMI_HARDCODED_ABSOLUTE_FILENAME', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (360, 'DMI_NONSERIALIZABLE_OBJECT_WRITTEN', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (361, 'DMI_USELESS_SUBSTRING', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (362, 'DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (363, 'EQ_DOESNT_OVERRIDE_EQUALS', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (364, 'EQ_UNUSUAL', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (365, 'FE_FLOATING_POINT_EQUALITY', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (366, 'VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (367, 'IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (368, 'IC_INIT_CIRCULARITY', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (369, 'ICAST_IDIV_CAST_TO_DOUBLE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (370, 'ICAST_INTEGER_MULTIPLY_CAST_TO_LONG', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (371, 'IM_AVERAGE_COMPUTATION_COULD_OVERFLOW', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (372, 'IM_BAD_CHECK_FOR_ODD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (373, 'INT_BAD_REM_BY_1', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (374, 'INT_VACUOUS_BIT_OPERATION', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (375, 'INT_VACUOUS_COMPARISON', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (376, 'MTIA_SUSPECT_SERVLET_INSTANCE_FIELD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (377, 'MTIA_SUSPECT_STRUTS_INSTANCE_FIELD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (378, 'NP_DEREFERENCE_OF_READLINE_VALUE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (379, 'NP_IMMEDIATE_DEREFERENCE_OF_READLINE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (380, 'NP_LOAD_OF_KNOWN_NULL_VALUE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (381, 'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (382, 'NP_METHOD_RETURN_RELAXING_ANNOTATION', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (383, 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 9, 00000000000, 00000000006);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (384, 'NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (385, 'NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (386, 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 9, 00000000000, 00000000026);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (387, 'NS_DANGEROUS_NON_SHORT_CIRCUIT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (388, 'NS_NON_SHORT_CIRCUIT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (389, 'PZLA_PREFER_ZERO_LENGTH_ARRAYS', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (390, 'QF_QUESTIONABLE_FOR_LOOP', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (391, 'RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (392, 'RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (393, 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 9, 00000000002, 00000000023);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (394, 'RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (395, 'REC_CATCH_EXCEPTION', 9, 00000000000, 00000000017);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (396, 'RI_REDUNDANT_INTERFACES', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (397, 'RV_CHECK_FOR_POSITIVE_INDEXOF', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (398, 'RV_DONT_JUST_NULL_CHECK_READLINE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (399, 'RV_REM_OF_HASHCODE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (400, 'RV_REM_OF_RANDOM_INT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (401, 'RV_RETURN_VALUE_IGNORED_INFERRED', 9, 00000000000, 00000000009);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (402, 'RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (403, 'SA_FIELD_DOUBLE_ASSIGNMENT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (404, 'SA_LOCAL_DOUBLE_ASSIGNMENT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (405, 'SA_LOCAL_SELF_ASSIGNMENT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (406, 'SF_SWITCH_FALLTHROUGH', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (407, 'SF_SWITCH_NO_DEFAULT', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (408, 'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (409, 'SE_PRIVATE_READ_RESOLVE_NOT_INHERITED', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (410, 'SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (411, 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (412, 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (413, 'UC_USELESS_CONDITION', 9, 00000000001, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (414, 'UC_USELESS_CONDITION_TYPE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (415, 'UC_USELESS_OBJECT', 9, 00000000000, 00000000024);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (416, 'UC_USELESS_OBJECT_STACK', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (417, 'UC_USELESS_VOID_METHOD', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (418, 'UCF_USELESS_CONTROL_FLOW', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (419, 'UCF_USELESS_CONTROL_FLOW_NEXT_LINE', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (420, 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 9, 00000000000, 00000000037);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (421, 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 9, 00000000000, 00000000007);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (422, 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 9, 00000000000, 00000000077);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (423, 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 9, 00000000000, 00000000049);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (424, 'XFB_XML_FACTORY_BYPASS', 9, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (425, 'THROWS_METHOD_THROWS_RUNTIMEEXCEPTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (426, 'MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (427, 'THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION', 1, 00000000000, 00000000000);
INSERT INTO `pattern` (`id`, `pattern_name`, `category_id`, `t_num`, `f_num`) VALUES (428, 'THROWS_METHOD_THROWS_CLAUSE_THROWABLE', 1, 00000000000, 00000000000);
COMMIT;

-- ----------------------------
-- Table structure for pattern_statistics
-- ----------------------------
DROP TABLE IF EXISTS `pattern_statistics`;
CREATE TABLE `pattern_statistics` (
  `id` int NOT NULL AUTO_INCREMENT,
  `violation_num` int DEFAULT NULL,
  `v_p_id` int DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `v_p_id` (`v_p_id`) USING BTREE,
  CONSTRAINT `pattern_statistics_ibfk_1` FOREIGN KEY (`v_p_id`) REFERENCES `version_pattern_rel` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of pattern_statistics
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for project
-- ----------------------------
DROP TABLE IF EXISTS `project`;
CREATE TABLE `project` (
  `project_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `project_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`project_id`) USING BTREE,
  KEY `user_id` (`user_id`) USING BTREE,
  CONSTRAINT `project_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `a_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of project
-- ----------------------------
BEGIN;
INSERT INTO `project` (`project_id`, `project_name`, `description`, `create_time`, `user_id`) VALUES ('b3f09e16ab4d4647920d117fcad99e12', 'maven-dependency-plugin', NULL, '2023-02-26 21:07:52', 1);
COMMIT;

-- ----------------------------
-- Table structure for report
-- ----------------------------
DROP TABLE IF EXISTS `report`;
CREATE TABLE `report` (
  `id` int NOT NULL AUTO_INCREMENT,
  `report_name` varchar(255) DEFAULT NULL,
  `file_path` varchar(255) DEFAULT NULL,
  `upload_time` datetime DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `report_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `a_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

-- ----------------------------
-- Records of report
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for version_pattern_rel
-- ----------------------------
DROP TABLE IF EXISTS `version_pattern_rel`;
CREATE TABLE `version_pattern_rel` (
  `id` int NOT NULL AUTO_INCREMENT,
  `version_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  `pattern_id` int DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `version_id` (`version_id`) USING BTREE,
  KEY `pattern_id` (`pattern_id`) USING BTREE,
  CONSTRAINT `version_pattern_rel_ibfk_1` FOREIGN KEY (`version_id`) REFERENCES `a_version` (`version_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `version_pattern_rel_ibfk_2` FOREIGN KEY (`pattern_id`) REFERENCES `pattern` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of version_pattern_rel
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for violation
-- ----------------------------
DROP TABLE IF EXISTS `violation`;
CREATE TABLE `violation` (
  `id` int NOT NULL AUTO_INCREMENT,
  `version_id` varchar(255) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `priority` int DEFAULT NULL,
  `class_name` varchar(255) DEFAULT NULL,
  `source_path` varchar(255) DEFAULT NULL,
  `method_name` varchar(255) DEFAULT NULL,
  `signature` varchar(255) DEFAULT NULL,
  `start_line` int DEFAULT NULL,
  `end_line` int DEFAULT NULL,
  `state` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `version_id` (`version_id`),
  KEY `pattern_id` (`type`)
) ENGINE=InnoDB AUTO_INCREMENT=781 DEFAULT CHARSET=utf8mb3;

-- ----------------------------
-- Records of violation
-- ----------------------------
BEGIN;
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (1, '7613b52545f8b921dbb0bb7960c665d8cf7375ac', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 154, 154, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (2, '54d95f7b21b47c7318a84f9a296ba9caa0889ac7', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 332, 332, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (3, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 415, 415, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (4, '814664b397324cc80202b3f923248cb0a1212baa', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 231, 231, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (5, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 334, 334, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (6, '47c7410405e9b0989ed3d0dbed4740528ef006cd', 'UC_USELESS_CONDITION', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/GetMojo.java', 'execute', NULL, 170, 170, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (7, 'de601ea3c3e2b880229755b502f0b24c83d2b942', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, -1, -1, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (8, 'b32fcc3e58699e94b8deec80791013c69d7e7676', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 298, 310, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (9, '6401e35e890d495aadaeacd934ae381e900d6e4b', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (10, '814664b397324cc80202b3f923248cb0a1212baa', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'readClasspathFile', NULL, 369, 369, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (11, '6401e35e890d495aadaeacd934ae381e900d6e4b', 'OBL_UNSATISFIED_OBLIGATION', 'EXPERIMENTAL', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (12, 'a1437d399a5f6c37a09864be1427000637fe2b89', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 299, 310, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (13, '075d2a526c6a4d5b5b24927d424d4b3675a4270e', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (14, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolvePluginArtifacts', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (15, 'a0770c6286241339684f403bcbc440a97218caf8', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 59, 59, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (16, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'fillMissingArtifactVersion', NULL, 278, 278, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (17, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 242, 242, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (18, 'decd737d9b20d07b74cb6f45b4288ab2a88271cd', 'NP_NULL_ON_SOME_PATH', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'containsVersion', NULL, 485, 485, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (19, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 61, 61, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (20, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 102, 102, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (21, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'WMI_WRONG_MAP_ITERATOR', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 173, 173, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (22, '2dc1c7a9f037f338cd13b082fe2027c9bd729727', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (23, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'readClasspathFile', NULL, 380, 380, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (24, '30e6197284363df69fc6b3b2657b1af10d39284b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/TreeMojo.java', '', NULL, 376, 376, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (25, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 178, 178, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (26, 'a59a97456dffe24c8a4b04c2a63f05736b8b504c', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 104, 104, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (27, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveDependencyArtifacts', NULL, 71, 71, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (28, '23ce0867411688b382c6638a26c6817f6553a4fe', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 184, 184, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (29, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 419, 419, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (30, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getLocal', NULL, 351, 351, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (31, '7196ab8588b0c4b79f64c4aeace875b989ade676', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 73, 73, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (32, '57bda759ebc88b02a1bb5956e40cd64c06da7988', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (33, '7756c31b2a50ab746ead31914ce9273ff990f679', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 187, 187, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (34, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 160, 160, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (35, '28aef7489af2f7c2452ae03426fe05427d9144e7', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', '', NULL, 100, 100, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (36, '7613b52545f8b921dbb0bb7960c665d8cf7375ac', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 132, 132, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (37, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 60, 60, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (38, 'a59a97456dffe24c8a4b04c2a63f05736b8b504c', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/UnpackMojo.java', '', NULL, 101, 101, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (39, 'e269d6bca2bccb95bdc740e79743a63435c95a23', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (40, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ListRepositoriesMojo.java', 'execute', NULL, 59, 59, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (41, '7756c31b2a50ab746ead31914ce9273ff990f679', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 298, 310, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (42, 'f23ac37bcbee4a6162ff3ce2ff1b5fd1a30bcbe0', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (43, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 236, 236, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (44, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 230, 230, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (45, '814664b397324cc80202b3f923248cb0a1212baa', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 336, 336, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (46, '6401e35e890d495aadaeacd934ae381e900d6e4b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', '', NULL, 67, 67, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (47, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveArtifactDependencies', NULL, 93, 93, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (48, '07369da348fe55dd8e4907367c62a5d72380e47d', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 335, 335, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (49, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 80, 80, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (50, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 380, 380, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (51, 'b32456593877b5cc0ba115a07391bbe94f7eb095', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (52, 'b32fcc3e58699e94b8deec80791013c69d7e7676', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 187, 187, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (53, 'b32456593877b5cc0ba115a07391bbe94f7eb095', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', '', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (54, '6401e35e890d495aadaeacd934ae381e900d6e4b', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (55, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (56, 'f8c288e37e765e44ff2fa17bb3c56ffb67a7485d', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 89, 89, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (57, 'aeb4da973e7958552433c22cdba10c9492d433e2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractFromDependenciesMojo.java', '', NULL, 68, 68, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (58, '31440588c2d3e69571c6dfe44a43c1c6cbdade78', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 332, 332, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (59, '23ce0867411688b382c6638a26c6817f6553a4fe', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 296, 308, 1);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (60, '54d95f7b21b47c7318a84f9a296ba9caa0889ac7', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 332, 332, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (61, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 415, 415, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (62, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 334, 334, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (63, 'a1437d399a5f6c37a09864be1427000637fe2b89', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 299, 310, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (64, '075d2a526c6a4d5b5b24927d424d4b3675a4270e', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (65, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolvePluginArtifacts', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (66, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'fillMissingArtifactVersion', NULL, 278, 278, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (67, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 242, 242, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (68, 'decd737d9b20d07b74cb6f45b4288ab2a88271cd', 'NP_NULL_ON_SOME_PATH', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'containsVersion', NULL, 485, 485, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (69, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 61, 61, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (70, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 102, 102, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (71, '2dc1c7a9f037f338cd13b082fe2027c9bd729727', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (72, '30e6197284363df69fc6b3b2657b1af10d39284b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/TreeMojo.java', '', NULL, 376, 376, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (73, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 178, 178, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (74, 'a59a97456dffe24c8a4b04c2a63f05736b8b504c', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 104, 104, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (75, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveDependencyArtifacts', NULL, 71, 71, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (76, '23ce0867411688b382c6638a26c6817f6553a4fe', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 184, 184, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (77, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getLocal', NULL, 351, 351, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (78, '7756c31b2a50ab746ead31914ce9273ff990f679', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 187, 187, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (79, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 160, 160, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (80, '28aef7489af2f7c2452ae03426fe05427d9144e7', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', '', NULL, 100, 100, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (81, 'c5751705d9e618971b63f0c0bcd6af84e79e6048', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 60, 60, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (82, 'a59a97456dffe24c8a4b04c2a63f05736b8b504c', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/UnpackMojo.java', '', NULL, 101, 101, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (83, 'e269d6bca2bccb95bdc740e79743a63435c95a23', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (84, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ListRepositoriesMojo.java', 'execute', NULL, 59, 59, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (85, 'f23ac37bcbee4a6162ff3ce2ff1b5fd1a30bcbe0', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (86, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 236, 236, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (87, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 230, 230, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (88, '6790d3b5720e0fea98bf629c240ac755996f642c', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveArtifactDependencies', NULL, 93, 93, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (89, '07369da348fe55dd8e4907367c62a5d72380e47d', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 335, 335, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (90, '3ed0f503f4935191e6e6eeb2be498c96a05222f2', 'SS_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 80, 80, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (91, 'd06a09e42a15ab9fea6ff1b35755d16a6b6a89a5', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 380, 380, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (92, 'b32456593877b5cc0ba115a07391bbe94f7eb095', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (93, 'b32fcc3e58699e94b8deec80791013c69d7e7676', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 187, 187, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (94, 'b32456593877b5cc0ba115a07391bbe94f7eb095', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', '', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (95, '05ad8b8f2fc9c06fe76794ce03a428c395371564', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (96, 'aeb4da973e7958552433c22cdba10c9492d433e2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractFromDependenciesMojo.java', '', NULL, 68, 68, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (97, '31440588c2d3e69571c6dfe44a43c1c6cbdade78', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'isUpdToDate', NULL, 332, 332, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (98, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (99, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 186, 186, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (100, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 313, 313, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (101, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 285, 285, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (102, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 151, 151, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (103, 'd6b4b575fb251c418f5f6438419648b4690191de', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 285, 285, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (104, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 224, 224, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (105, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (106, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 105, 105, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (107, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 105, 105, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (108, 'd6b4b575fb251c418f5f6438419648b4690191de', 'WMI_WRONG_MAP_ITERATOR', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 172, 172, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (109, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 121, 121, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (110, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (111, 'd6b4b575fb251c418f5f6438419648b4690191de', 'OBL_UNSATISFIED_OBLIGATION', 'EXPERIMENTAL', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (112, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', '', NULL, 67, 67, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (113, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 67, 67, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (114, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', '', NULL, 178, 178, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (115, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', 'executeReport', NULL, 111, 111, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (116, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', '', NULL, 101, 101, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (117, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', '', NULL, 111, 111, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (118, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', 'getOutputDirectory', NULL, 168, 168, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (119, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', 'executeReport', NULL, 95, 95, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (120, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeReportMojo.java', '', NULL, 95, 95, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (121, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 337, 337, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (122, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 383, 383, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (123, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'execute', NULL, 202, 202, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (124, 'd6b4b575fb251c418f5f6438419648b4690191de', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'isUpdToDate', NULL, 310, 310, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (125, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 190, 190, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (126, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 331, 331, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (127, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (128, 'd6b4b575fb251c418f5f6438419648b4690191de', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 52, 570, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (129, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 422, 422, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (130, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 268, 268, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (131, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'attachFile', NULL, 268, 268, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (132, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 418, 418, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (133, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 236, 236, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (134, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installArtifact', NULL, 138, 138, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (135, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (136, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 133, 133, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (137, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installBaseSnapshot', NULL, 165, 165, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (138, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'execute', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (139, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 416, 416, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (140, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 346, 346, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (141, 'd6b4b575fb251c418f5f6438419648b4690191de', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 378, 378, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (142, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/TreeMojo.java', 'serialiseDependencyTree', NULL, 350, 350, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (143, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 387, 387, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (144, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 157, 157, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (145, 'd6b4b575fb251c418f5f6438419648b4690191de', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getLocal', NULL, 387, 387, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (146, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (147, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 106, 106, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (148, 'd6b4b575fb251c418f5f6438419648b4690191de', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 189, 189, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (149, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 87, 87, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (150, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 85, 85, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (151, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 182, 182, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (152, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 188, 188, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (153, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 106, 106, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (154, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (155, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 141, 141, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (156, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 150, 150, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (157, 'd6b4b575fb251c418f5f6438419648b4690191de', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (158, 'd6b4b575fb251c418f5f6438419648b4690191de', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 64, 64, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (159, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 181, 181, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (160, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyFilterMojo.java', 'getDependencySets', NULL, 255, 255, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (161, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (162, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 189, 189, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (163, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 227, 227, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (164, '32015a352370fb873a4e7ec241470551a756493b', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (165, '32015a352370fb873a4e7ec241470551a756493b', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 286, 286, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (166, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 313, 313, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (167, '32015a352370fb873a4e7ec241470551a756493b', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 286, 286, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (168, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 82, 82, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (169, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 115, 115, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (170, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 115, 115, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (171, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (172, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 167, 167, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (173, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'attachFile', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (174, '32015a352370fb873a4e7ec241470551a756493b', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'isUpdToDate', NULL, 293, 293, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (175, '32015a352370fb873a4e7ec241470551a756493b', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'execute', NULL, 190, 190, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (176, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 178, 178, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (177, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 219, 219, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (178, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 313, 313, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (179, '32015a352370fb873a4e7ec241470551a756493b', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 55, 532, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (180, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'attachFile', NULL, 251, 251, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (181, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 251, 251, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (182, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'execute', NULL, 99, 99, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (183, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (184, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 131, 131, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (185, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installArtifact', NULL, 136, 136, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (186, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installBaseSnapshot', NULL, 163, 163, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (187, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 98, 98, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (188, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'execute', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (189, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PropertiesMojo.java', '', NULL, 65, 65, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (190, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PropertiesMojo.java', 'execute', NULL, 65, 65, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (191, '32015a352370fb873a4e7ec241470551a756493b', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 387, 387, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (192, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 356, 356, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (193, '32015a352370fb873a4e7ec241470551a756493b', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 425, 425, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (194, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 347, 347, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (195, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (196, '32015a352370fb873a4e7ec241470551a756493b', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/GoOfflineMojo.java', 'execute', NULL, 56, 56, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (197, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (198, '32015a352370fb873a4e7ec241470551a756493b', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 86, 86, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (199, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 84, 84, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (200, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 183, 183, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (201, '32015a352370fb873a4e7ec241470551a756493b', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 103, 103, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (202, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (203, '32015a352370fb873a4e7ec241470551a756493b', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 197, 197, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (204, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 102, 102, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (205, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 110, 110, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (206, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 129, 129, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (207, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 137, 137, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (208, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 146, 146, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (209, '32015a352370fb873a4e7ec241470551a756493b', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 150, 150, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (210, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 200, 200, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (211, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 133, 133, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (212, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (213, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 196, 196, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (214, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 198, 198, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (215, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveDependencyArtifacts', NULL, 71, 71, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (216, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolvePluginArtifacts', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (217, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (218, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 205, 205, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (219, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveArtifactDependencies', NULL, 93, 93, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (220, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (221, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (222, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (223, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 377, 377, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (224, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 415, 415, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (225, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 345, 345, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (226, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 131, 131, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (227, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 90, 90, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (228, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 99, 99, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (229, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 86, 86, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (230, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (231, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (232, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 106, 106, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (233, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 139, 139, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (234, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 148, 148, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (235, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 152, 152, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (236, '3a2c6c7367e94bd7ebd67a1d889a061f825f9244', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 64, 64, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (237, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (238, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (239, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (240, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (241, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (242, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (243, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (244, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (245, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (246, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (247, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (248, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (249, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (250, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (251, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (252, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (253, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (254, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (255, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (256, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (257, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (258, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (259, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 359, 363, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (260, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (261, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (262, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (263, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (264, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (265, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (266, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (267, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (268, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (269, '5cf91852ecb033054815d61bfd2e5ca06df659da', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (270, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 339, 339, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (271, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 339, 339, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (272, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 260, 260, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (273, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 275, 280, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (274, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 287, 292, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (275, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (276, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 132, 132, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (277, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 163, 163, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (278, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/CopyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (279, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/CopyMojo.java', '', NULL, 82, 82, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (280, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/AbstractFromDependenciesMojo.java', 'doExecute', NULL, 139, 139, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (281, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (282, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 354, 354, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (283, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 359, 359, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (284, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (285, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'readClasspathFile', NULL, 399, 399, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (286, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 57, 589, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (287, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 221, 221, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (288, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (289, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 102, 102, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (290, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/AbstractResolveMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (291, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 98, 98, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (292, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 87, 87, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (293, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 89, 89, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (294, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'NP_NULL_ON_SOME_PATH', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/tree/TreeMojo.java', 'containsVersion', NULL, 612, 612, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (295, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (296, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (297, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 110, 110, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (298, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 102, 102, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (299, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 129, 129, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (300, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 146, 146, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (301, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 150, 150, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (302, '5a5f090771dc6ba6643a473038c35c6770c10d2f', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 137, 137, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (303, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (304, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (305, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (306, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (307, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (308, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (309, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (310, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (311, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (312, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 169, 169, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (313, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (314, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (315, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (316, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (317, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (318, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (319, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (320, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (321, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (322, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (323, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (324, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (325, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 359, 363, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (326, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (327, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (328, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (329, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (330, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (331, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (332, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (333, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (334, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (335, '4cf4e350af79fbdce468d4b36fc4a22bb1933312', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (336, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (337, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (338, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (339, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (340, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (341, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (342, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (343, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (344, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (345, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (346, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (347, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (348, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (349, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (350, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (351, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (352, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (353, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (354, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (355, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (356, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (357, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (358, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (359, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (360, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 247, 247, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (361, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (362, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (363, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (364, '6a9e1e708c5dc32429a14fd0bf48b4098a7de10a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (365, '709bf54d624e1bed6793a44e19948730a68e3b86', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (366, '709bf54d624e1bed6793a44e19948730a68e3b86', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (367, '709bf54d624e1bed6793a44e19948730a68e3b86', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (368, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (369, '709bf54d624e1bed6793a44e19948730a68e3b86', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (370, '709bf54d624e1bed6793a44e19948730a68e3b86', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (371, '709bf54d624e1bed6793a44e19948730a68e3b86', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (372, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (373, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (374, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (375, '709bf54d624e1bed6793a44e19948730a68e3b86', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (376, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (377, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (378, '709bf54d624e1bed6793a44e19948730a68e3b86', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (379, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (380, '709bf54d624e1bed6793a44e19948730a68e3b86', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (381, '709bf54d624e1bed6793a44e19948730a68e3b86', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (382, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (383, '709bf54d624e1bed6793a44e19948730a68e3b86', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (384, '709bf54d624e1bed6793a44e19948730a68e3b86', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (385, '709bf54d624e1bed6793a44e19948730a68e3b86', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (386, '709bf54d624e1bed6793a44e19948730a68e3b86', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (387, '709bf54d624e1bed6793a44e19948730a68e3b86', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (388, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (389, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (390, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (391, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (392, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (393, '709bf54d624e1bed6793a44e19948730a68e3b86', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (394, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (395, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (396, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (397, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (398, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (399, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (400, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (401, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (402, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (403, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (404, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (405, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (406, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (407, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (408, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (409, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (410, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (411, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (412, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (413, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (414, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (415, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (416, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (417, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (418, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (419, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (420, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (421, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (422, '624e12628ecbef3c8af2cf23b70c859f559f5694', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (423, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (424, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (425, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (426, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (427, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (428, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (429, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (430, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (431, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (432, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (433, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (434, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (435, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (436, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (437, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (438, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (439, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (440, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (441, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (442, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (443, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (444, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (445, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 359, 363, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (446, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (447, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (448, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (449, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 396, 396, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (450, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (451, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (452, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (453, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (454, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (455, 'c518d6f9c43bfa8292e52e93c44e2f8b568474af', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (456, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (457, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (458, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (459, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (460, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (461, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (462, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (463, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (464, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (465, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (466, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (467, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (468, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (469, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (470, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (471, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (472, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (473, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (474, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (475, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (476, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (477, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (478, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 359, 363, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (479, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (480, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (481, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (482, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (483, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (484, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (485, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (486, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (487, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (488, '2f15be38d1e72af9e7ad1222df01eb28695e0da0', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (489, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (490, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (491, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 221, 221, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (492, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 265, 265, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (493, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (494, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 293, 293, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (495, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveArtifactDependencies', NULL, 94, 94, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (496, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveDependencyArtifacts', NULL, 72, 72, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (497, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 217, 217, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (498, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 265, 265, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (499, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolvePluginArtifacts', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (500, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (501, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (502, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 123, 123, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (503, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'WMI_WRONG_MAP_ITERATOR', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (504, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'getMismatch', NULL, 277, 277, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (505, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', 'checkDependencies', NULL, 203, 203, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (506, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', 'checkDependencies', NULL, 173, 173, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (507, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', '', NULL, 173, 173, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (508, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', 'checkDependencies', NULL, 185, 185, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (509, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', 'execute', NULL, 142, 142, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (510, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeMojo.java', '', NULL, 142, 142, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (511, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 237, 237, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (512, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'execute', NULL, 109, 109, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (513, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 201, 201, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (514, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 152, 152, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (515, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 127, 127, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (516, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 242, 242, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (517, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'isUpdToDate', NULL, 179, 179, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (518, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 51, 307, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (519, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 286, 286, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (520, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'compare', NULL, 282, 282, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (521, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 133, 133, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (522, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 346, 346, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (523, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 416, 416, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (524, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 378, 378, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (525, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 139, 139, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (526, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UPM_UNCALLED_PRIVATE_METHOD', 'PERFORMANCE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'createManagedVersionMap', NULL, 318, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (527, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (528, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 87, 87, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (529, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (530, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (531, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 106, 106, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (532, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 150, 150, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (533, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (534, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 141, 141, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (535, 'dafc11d946b15c6ab47e38d85696dd22bc0a6327', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 64, 64, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (536, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (537, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (538, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (539, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (540, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (541, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (542, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (543, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (544, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (545, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (546, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (547, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (548, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (549, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (550, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (551, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (552, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (553, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (554, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (555, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (556, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (557, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (558, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (559, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (560, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 247, 247, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (561, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (562, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (563, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (564, '95f63c26cd8652a68b3901aff9aeee828755d55a', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (565, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (566, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (567, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (568, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (569, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (570, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (571, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (572, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (573, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (574, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (575, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (576, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (577, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (578, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (579, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (580, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (581, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (582, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (583, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (584, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (585, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (586, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (587, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (588, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (589, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 247, 247, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (590, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (591, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (592, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (593, '26c658211ad79dd41d39acf1fa96f0c2fe814b06', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (594, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 198, 198, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (595, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolvePluginArtifacts', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (596, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 200, 200, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (597, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 133, 133, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (598, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveDependencyArtifacts', NULL, 71, 71, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (599, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'getArtifact', NULL, 205, 205, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (600, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (601, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'resolveArtifactDependencies', NULL, 93, 93, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (602, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 196, 196, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (603, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (604, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 170, 170, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (605, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (606, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (607, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 345, 345, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (608, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 377, 377, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (609, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 415, 415, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (610, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 131, 131, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (611, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 99, 99, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (612, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 90, 90, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (613, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (614, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 86, 86, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (615, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (616, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 106, 106, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (617, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 139, 139, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (618, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 148, 148, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (619, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 152, 152, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (620, 'a5c11602eaaeb98fdeeea37eb5666dee35642814', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 64, 64, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (621, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (622, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (623, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (624, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (625, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (626, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (627, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (628, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (629, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (630, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (631, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (632, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (633, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (634, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (635, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (636, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (637, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (638, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (639, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (640, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (641, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (642, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (643, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (644, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 359, 363, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (645, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (646, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (647, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/TreeMojo.java', 'buildTree', NULL, 390, 390, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (648, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/tree/VerboseDependencyGraphBuilder.java', 'applyDependencyManagementDfs', NULL, 174, 174, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (649, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 248, 248, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (650, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (651, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (652, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (653, 'a7c84c6d38f58327cbed67474ccd1284d127cbe2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (654, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 181, 181, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (655, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 310, 310, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (656, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (657, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, 189, 189, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (658, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 224, 224, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (659, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (660, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 283, 283, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (661, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 283, 283, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (662, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractFromDependenciesMojo.java', 'execute', NULL, 98, 98, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (663, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', 'resolveArtifactDependencies', NULL, 116, 116, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (664, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (665, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 116, 116, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (666, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (667, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', '', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (668, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AnalyzeDuplicateMojo.java', 'execute', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (669, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 319, 319, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (670, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'execute', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (671, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'readClasspathFile', NULL, 359, 359, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (672, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 252, 252, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (673, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'isUpdToDate', NULL, 294, 294, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (674, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 168, 168, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (675, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 314, 314, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (676, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 55, 533, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (677, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (678, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', '', NULL, 179, 179, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (679, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/BuildClasspathMojo.java', 'attachFile', NULL, 252, 252, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (680, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installBaseSnapshot', NULL, 163, 163, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (681, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'execute', NULL, 99, 99, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (682, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'installArtifact', NULL, 136, 136, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (683, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 98, 98, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (684, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 131, 131, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (685, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', '', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (686, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/CopyDependenciesMojo.java', 'execute', NULL, 96, 96, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (687, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PropertiesMojo.java', '', NULL, 66, 66, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (688, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PropertiesMojo.java', 'execute', NULL, 66, 66, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (689, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'findDeleteTarget', NULL, 456, 456, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (690, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 387, 387, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (691, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'SIC_INNER_SHOULD_BE_STATIC_ANON', 'PERFORMANCE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', '', NULL, 260, 263, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (692, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/PurgeLocalRepositoryMojo.java', 'refreshDependenciesForProject', NULL, 418, 418, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (693, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_NULL_ON_SOME_PATH', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/TreeMojo.java', 'containsVersion', NULL, 506, 506, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (694, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'MF_CLASS_MASKS_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (695, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 302, 302, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (696, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getLocal', NULL, 436, 436, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (697, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 167, 167, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (698, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 435, 435, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (699, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 70, 70, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (700, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 104, 104, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (701, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 87, 87, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (702, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 186, 186, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (703, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', 'execute', NULL, 85, 85, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (704, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DM_DEFAULT_ENCODING', 'I18N', 1, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 197, 197, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (705, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'write', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (706, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 137, 137, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (707, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 118, 118, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (708, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 110, 110, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (709, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 137, 137, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (710, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 150, 150, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (711, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 146, 146, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (712, 'dd79fc9c3b5342d09a4e4ba7e485e328129881d2', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 59, 59, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (713, '95ebbdced0909727500c69f71c9b0e032613b741', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (714, '95ebbdced0909727500c69f71c9b0e032613b741', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (715, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (716, '95ebbdced0909727500c69f71c9b0e032613b741', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 342, 342, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (717, '95ebbdced0909727500c69f71c9b0e032613b741', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (718, '95ebbdced0909727500c69f71c9b0e032613b741', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (719, '95ebbdced0909727500c69f71c9b0e032613b741', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 155, 155, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (720, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (721, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (722, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'getFileMappers', NULL, 403, 403, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (723, '95ebbdced0909727500c69f71c9b0e032613b741', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/CopyMojo.java', '', NULL, 83, 83, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (724, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'getFileMappers', NULL, 232, 232, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (725, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/UnpackMojo.java', 'setFileMappers', NULL, 243, 243, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (726, '95ebbdced0909727500c69f71c9b0e032613b741', 'NP_NULL_PARAM_DEREF', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'doExecute', NULL, 199, 199, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (727, '95ebbdced0909727500c69f71c9b0e032613b741', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', '', NULL, 61, 497, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (728, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/BuildClasspathMojo.java', 'storeClasspathFile', NULL, 338, 338, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (729, '95ebbdced0909727500c69f71c9b0e032613b741', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/CopyDependenciesMojo.java', '', NULL, 97, 97, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (730, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'getFileMappers', NULL, 180, 180, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (731, '95ebbdced0909727500c69f71c9b0e032613b741', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromDependencies/UnpackDependenciesMojo.java', 'setFileMappers', NULL, 191, 191, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (732, '95ebbdced0909727500c69f71c9b0e032613b741', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/AbstractResolveMojo.java', '', NULL, 75, 75, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (733, '95ebbdced0909727500c69f71c9b0e032613b741', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', 'getOutput', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (734, '95ebbdced0909727500c69f71c9b0e032613b741', 'SIC_INNER_SHOULD_BE_STATIC', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolveDependenciesMojo.java', '', NULL, 340, 344, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (735, '95ebbdced0909727500c69f71c9b0e032613b741', 'UC_USELESS_OBJECT', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'resolvePluginArtifacts', NULL, 175, 175, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (736, '95ebbdced0909727500c69f71c9b0e032613b741', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/resolvers/ResolvePluginsMojo.java', 'doExecute', NULL, 73, 73, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (737, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/DependencyUtil.java', 'write', NULL, 249, 249, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (738, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 122, 122, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (739, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 114, 114, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (740, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 153, 153, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (741, '95ebbdced0909727500c69f71c9b0e032613b741', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 144, 144, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (742, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UR_UNINIT_READ', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '<init>', NULL, 100, 100, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (743, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractDependencyMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (744, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractFromDependenciesMojo.java', '', NULL, 61, 61, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (745, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/AbstractResolveMojo.java', '', NULL, 82, 82, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (746, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 92, 92, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (747, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 107, 107, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (748, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 103, 103, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (749, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getArtifactItems', NULL, 94, 94, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (750, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getArtifactItems', NULL, 84, 84, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (751, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', '', NULL, 84, 84, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (752, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/fromConfiguration/UnpackMojo.java', '', NULL, 88, 88, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (753, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UUF_UNUSED_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, -1, -1, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (754, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 82, 82, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (755, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolveDependencySourcesMojo.java', '', NULL, 91, 91, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (756, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 71, 71, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (757, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/resolvers/ResolvePluginsMojo.java', '', NULL, 80, 80, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (758, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UPM_UNCALLED_PRIVATE_METHOD', 'PERFORMANCE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'logResults', NULL, 270, 310, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (759, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'unpackFile', NULL, 103, 103, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (760, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/DependencyUtil.java', 'unpackFile', NULL, 89, 89, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (761, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UPM_UNCALLED_PRIVATE_METHOD', 'PERFORMANCE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/filters/FilterArtifacts.java', 'log', NULL, 93, 100, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (762, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 79, 79, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (763, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/DefaultFileMarkerHandler.java', 'setMarker', NULL, 82, 82, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (764, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 107, 107, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (765, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 104, 104, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (766, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/markers/SourcesFileMarkerHandler.java', 'setMarker', NULL, 111, 111, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (767, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'UWF_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', '', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (768, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'DLS_DEAD_LOCAL_STORE', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 54, 54, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (769, '2ad60e0b8cde94b21ebbc172a75e635a79fbfadf', 'NP_UNWRITTEN_FIELD', 'CORRECTNESS', 2, NULL, 'src/main/java/org/apache/maven/plugin/dependency/utils/translators/ClassifierTypeTranslator.java', 'translate', NULL, 62, 62, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (770, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 253, 253, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (771, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'unpack', NULL, 276, 276, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (772, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'REC_CATCH_EXCEPTION', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (773, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'DE_MIGHT_IGNORE', 'BAD_PRACTICE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/AbstractDependencyMojo.java', 'silenceUnarchiver', NULL, 343, 343, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (774, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/GetMojo.java', '', NULL, 120, 120, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (775, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'URF_UNREAD_FIELD', 'PERFORMANCE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', '', NULL, 124, 124, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (776, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'DODGY_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/ListClassesMojo.java', 'makeBuildingRequest', NULL, 220, 220, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (777, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AbstractAnalyzeMojo.java', 'createProjectDependencyAnalyzer', NULL, 273, 273, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (778, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'DODGY_CODE', 3, NULL, 'src/main/java/org/apache/maven/plugins/dependency/analyze/AnalyzeDepMgt.java', 'checkDependencyManagement', NULL, 154, 154, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (779, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'BAD_PRACTICE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/AbstractFromConfigurationMojo.java', 'getProcessedArtifactItems', NULL, 164, 164, 0);
INSERT INTO `violation` (`id`, `version_id`, `type`, `category`, `priority`, `class_name`, `source_path`, `method_name`, `signature`, `start_line`, `end_line`, `state`) VALUES (780, 'd2a61a7057a4f1eef5de1c9cbc4b5d13a5f5c0ef', 'EI_EXPOSE_REP2', 'MALICIOUS_CODE', 2, NULL, 'src/main/java/org/apache/maven/plugins/dependency/fromConfiguration/ArtifactItem.java', 'setFileMappers', NULL, 414, 414, 0);
COMMIT;

-- ----------------------------
-- Table structure for violation_code
-- ----------------------------
DROP TABLE IF EXISTS `violation_code`;
CREATE TABLE `violation_code` (
  `id` int NOT NULL AUTO_INCREMENT,
  `violation_id` int DEFAULT NULL,
  `snippet` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
  PRIMARY KEY (`id`),
  KEY `violation_id` (`violation_id`),
  CONSTRAINT `violation_code_ibfk_1` FOREIGN KEY (`violation_id`) REFERENCES `violation` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=763 DEFAULT CHARSET=utf8mb3;

-- ----------------------------
-- Records of violation_code
-- ----------------------------
BEGIN;
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (1, 1, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (2, 2, '            return (cpString.equals(oldCp) || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (3, 3, '            else if ( arg1 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (4, 4, '        try ( FileWriter writer = new FileWriter( file, append ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (5, 5, '            Writer w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (6, 6, '            if ( tokens.length < 3 && tokens.length > 5 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (7, 8, '    private class SnapshotsFilter\n        extends AbstractFilter\n    {\n        @Override\n        public boolean accept( Node node, List<Node> parents )\n        {\n            if ( node.getDependency() == null )\n            {\n                return false;\n            }\n            else\n            {\n                return ArtifactUtils.isSnapshot( node.getDependency().getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (8, 9, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (9, 10, '        try ( BufferedReader r = new BufferedReader( new FileReader( outputFile ) ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (10, 11, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (11, 12, '    private class SnapshotsFilter extends AbstractFilter\n    {\n        @Override\n        public boolean accept( Node node, List<Node> parents )\n        {\n            if ( node.getDependency() == null )\n            {\n                return false;\n            }\n            else\n            {\n                return ArtifactUtils.isSnapshot( node.getDependency().getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (12, 13, '            node.getDependency().setArtifact( node.getDependency().getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (13, 14, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (14, 15, '        Set<Artifact> results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (15, 16, '        if ( !findDependencyVersion( artifact, project.getDependencies(), false )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (16, 17, '                + ( this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName() ) + \" to: \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (17, 18, '        return recommendedVersion.compareTo( theVersion ) <= 0;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (18, 19, '    @Parameter( property = \"mdep.prependGroupId\", defaultValue = \"false\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (19, 20, '     * @return resolved set of dependencies\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (20, 21, '                Dependency depMgtDependency = (Dependency) mismatch.get( resolvedArtifact );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (21, 22, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (22, 23, '            r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (23, 24, '        if ( includes != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (24, 25, '        Set plugins = project.getPluginArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (25, 26, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (26, 27, '     * @readonly\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (27, 28, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (28, 29, '            else if ( arg2 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (29, 30, '                artifactRepositoryManager.createArtifactRepository( super.getLocal().getId(), \"file://\"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (30, 31, '            Set plugins = DependencyUtil.resolvePluginArtifacts( project, factory, local, remotePluginRepositories,\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (31, 32, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (32, 33, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (33, 34, '    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (34, 35, '        adm.setProject( this.project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (35, 36, '            marker.setLastModified( ts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (36, 37, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (37, 38, '        MarkerHandler handler = new DefaultFileMarkerHandler( artifact, this.markersDirectory );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (38, 39, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (39, 40, '					project.getArtifacts(), project.getArtifact(), this.getLocal(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (40, 41, '    private class SnapshotsFilter\n        extends AbstractFilter\n    {\n        @Override\n        public boolean accept( Node node, List<Node> parents )\n        {\n            if ( node.getDependency() == null )\n            {\n                return false;\n            }\n            else\n            {\n                return ArtifactUtils.isSnapshot( node.getDependency().getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (41, 42, '            node.getDependency().setArtifact( node.getDependency().getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (42, 43, '            writer = new FileWriter( file, append );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (43, 44, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (44, 45, '        try ( Writer w = new BufferedWriter( new FileWriter( out ) ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (45, 46, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (46, 47, '     * List of Remote Repositories used by the resolver\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (47, 48, '            return ( cpString.equals( oldCp ) || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (48, 49, '    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (49, 50, '        BufferedReader r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (50, 51, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (51, 52, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (52, 53, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (53, 54, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (54, 55, '            w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (55, 56, '        if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (56, 58, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (57, 59, '    private class SnapshotsFilter\n        extends AbstractFilter\n    {\n        @Override\n        public boolean accept( Node node, List<Node> parents )\n        {\n            if ( node.getDependency() == null )\n            {\n                return false;\n            }\n            else\n            {\n                return ArtifactUtils.isSnapshot( node.getDependency().getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (58, 60, '            return (cpString.equals(oldCp) || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (59, 61, '            else if ( arg1 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (60, 62, '            Writer w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (61, 63, '    private class SnapshotsFilter extends AbstractFilter\n    {\n        @Override\n        public boolean accept( Node node, List<Node> parents )\n        {\n            if ( node.getDependency() == null )\n            {\n                return false;\n            }\n            else\n            {\n                return ArtifactUtils.isSnapshot( node.getDependency().getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (62, 64, '            node.getDependency().setArtifact( node.getDependency().getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (63, 65, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (64, 66, '        if ( !findDependencyVersion( artifact, project.getDependencies(), false )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (65, 67, '                + ( this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName() ) + \" to: \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (66, 68, '        return recommendedVersion.compareTo( theVersion ) <= 0;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (67, 69, '    @Parameter( property = \"mdep.prependGroupId\", defaultValue = \"false\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (68, 70, '     * @return resolved set of dependencies\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (69, 71, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (70, 72, '        if ( includes != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (71, 73, '        Set plugins = project.getPluginArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (72, 74, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (73, 75, '     * @readonly\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (74, 76, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (75, 77, '                artifactRepositoryManager.createArtifactRepository( super.getLocal().getId(), \"file://\"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (76, 78, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (77, 79, '    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (78, 80, '        adm.setProject( this.project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (79, 81, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (80, 82, '        MarkerHandler handler = new DefaultFileMarkerHandler( artifact, this.markersDirectory );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (81, 83, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (82, 84, '					project.getArtifacts(), project.getArtifact(), this.getLocal(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (83, 85, '            node.getDependency().setArtifact( node.getDependency().getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (84, 86, '            writer = new FileWriter( file, append );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (85, 87, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (86, 88, '     * List of Remote Repositories used by the resolver\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (87, 89, '            return ( cpString.equals( oldCp ) || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (88, 90, '    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (89, 91, '        BufferedReader r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (90, 92, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (91, 93, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<Artifact>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (92, 94, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (93, 95, '            w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (94, 97, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (95, 99, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (96, 100, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (97, 101, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (98, 102, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (99, 103, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (100, 104, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (101, 105, '     * @throws InvalidDependencyVersionException\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (102, 106, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (103, 107, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (104, 108, '                Dependency depMgtDependency = (Dependency) mismatch.get( resolvedArtifact );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (105, 109, '        DependencyManagement depMgt = project.getDependencyManagement();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (106, 110, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (107, 111, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (108, 112, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (109, 113, '            model = pomReader.read( new FileReader( project.getFile() ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (110, 114, '        return siteRenderer;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (111, 115, '            analysis = analyzer.analyze( project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (112, 116, '        if ( outputDirectory == null || !outputDirectory.exists() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (113, 117, '            analysis = analyzer.analyze( project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (114, 118, '        getLog().info( outputDirectory.toString() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (115, 119, '        if ( \"pom\".equals( project.getPackaging() ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (116, 120, '        if ( \"pom\".equals( project.getPackaging() ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (117, 121, '            Writer w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (118, 122, '        BufferedReader r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (119, 123, '        List artList = new ArrayList( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (120, 124, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (121, 125, '        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (122, 126, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (123, 127, '        if (cpFile != null)\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (124, 128, 'public class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator\n{\n\n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     * \n     * @parameter expression=\"${mdep.stripVersion}\" default-value=\"false\"\n     * @parameter\n     */\n    private boolean stripVersion = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stipVersion parameter does nothing then).\n     * \n     * @parameter expression=\"${mdep.prefix}\"\n     */\n    private String prefix;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * This parameter is deprecated. Use outputFile instead.\n     * @parameter expression=\"${mdep.cpFile}\"\n     * @deprecated use outputFile instead\n     * @since 2.0\n     */\n    private File cpFile;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * @parameter expression=\"${mdep.outputFile}\"\n     */\n    private File outputFile;\n    \n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     * \n     * @parameter default-value=\"false\" expression=\"${mdep.regenerateFile}\"\n     */\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     * \n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.fileSeparator}\"\n     */\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     * \n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.pathSeparator}\"\n     */\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     * \n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.localRepoProperty}\"\n     */\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     * \n     * @since 2.0\n     * @parameter default-value=false\n     */\n    boolean attach;\n    \n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     * \n     * @since 2.0\n     * @parameter default-value=false expression=\"${mdep.outputFilterFile}\"\n     */\n    boolean outputFilterFile;\n\n    /**\n     * Maven ProjectHelper\n     * \n     * @component\n     * @readonly\n     */\n    private MavenProjectHelper projectHelper;\n\n    boolean isFileSepSet = true;\n\n    boolean isPathSepSet = true;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates through calling copyArtifact.\n     * \n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getDependencies\n     * @see #copyArtifact(Artifact, boolean)\n     */\n    public void execute()\n        throws MojoExecutionException\n    {\n        \n        if (cpFile != null)\n        {\n            getLog().warn( \"The parameter cpFile is deprecated. Use outputFile instead.\" );\n            this.outputFile = cpFile;\n        }\n        \n        // initialize the separators.\n        if ( StringUtils.isEmpty( fileSeparator ) )\n        {\n            isFileSepSet = false;\n        }\n        else\n        {\n            isFileSepSet = true;\n        }\n\n        if ( StringUtils.isEmpty( pathSeparator ) )\n        {\n            isPathSepSet = false;\n        }\n        else\n        {\n            isPathSepSet = true;\n        }\n\n        //don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List artList = new ArrayList( artifacts );\n\n        StringBuffer sb = new StringBuffer();\n        Iterator i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( (Artifact) i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( (Artifact) i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            String separator = File.separator;\n\n            // if the file sep is \"\\\" then I need to escape it for the regex\n            if ( File.separator.equals( \"\\\\\" ) )\n            {\n                separator = \"\\\\\\\\\";\n            }\n\n            cpString = cpString.replaceAll( separator, fileSeparator );\n        }\n\n        //make the string valid for filtering\n        if (outputFilterFile)\n        {\n            cpString = \"classpath=\"+ cpString;\n        }\n        \n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\\n\" + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpdToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified stringBuffer.\n     * \n     * @param art\n     * @param sb\n     */\n    protected void appendArtifactPath( Artifact art, StringBuffer sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     * \n     * @param cpString\n     * @return true if the specified classpath equals to that found inside the file, false otherwise (including when\n     *         file does not exists but new classpath does).\n     */\n    private boolean isUpdToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n        }\n        catch ( Exception ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \" + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * It stores the specified string into that file.\n     * \n     * @param cpString the string to be written into the file.\n     * @throws MojoExecutionException\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        \n        //make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        try\n        {\n           \n            \n            Writer w = new BufferedWriter( new FileWriter( out ) );\n\n            try\n            {\n                w.write( cpString );\n\n                getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n            }\n            catch ( IOException ex )\n            {\n                throw new MojoExecutionException( \"Error while writting to classpath file \'\" + out + \"\': \" +\n                    ex.toString(), ex );\n            }\n            finally\n            {\n                w.close();\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while opening/closing classpath file \'\" + out + \"\': \" +\n                ex.toString(), ex );\n        }\n    }\n\n    /**\n     * Reads into a string the file specified by the mojo param \'outputFile\'. Assumes, the instance variable \'outputFile\' is not\n     * null.\n     * \n     * @return the string contained in the classpathFile, if exists, or null ortherwise.\n     * @throws MojoExecutionException\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException(\n                                                \"The outputFile parameter cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuffer sb = new StringBuffer();\n        BufferedReader r = new BufferedReader( new FileReader( outputFile ) );\n\n        try\n        {\n            String l;\n            while ( ( l = r.readLine() ) != null )\n            {\n                sb.append( l );\n            }\n\n            return sb.toString();\n        }\n        finally\n        {\n            r.close();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     * \n     * @param arg1 first object\n     * @param arg2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than\n     *         <code>0</code> if this string is lexicographically less than the string argument; and a value greater\n     *         than <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    public int compare( Object arg1, Object arg2 )\n    {\n        if ( arg1 instanceof Artifact && arg2 instanceof Artifact )\n        {\n            if ( arg1 == arg2 )\n            {\n                return 0;\n            }\n            else if ( arg1 == null )\n            {\n                return -1;\n            }\n            else if ( arg2 == null )\n            {\n                return +1;\n            }\n\n            Artifact art1 = (Artifact) arg1;\n            Artifact art2 = (Artifact) arg2;\n\n            String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n            String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n            return s1.compareTo( s2 );\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getCpFile()\n    {\n        return this.outputFile;\n    }\n\n    /**\n     * @param theCpFile the outputFile to set\n     */\n    public void setCpFile( File theCpFile )\n    {\n        this.outputFile = theCpFile;\n    }\n\n    /**\n     * @return the fileSeparator\n     */\n    public String getFileSeparator()\n    {\n        return this.fileSeparator;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @return the pathSeparator\n     */\n    public String getPathSeparator()\n    {\n        return this.pathSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix()\n    {\n        return this.prefix;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @return the regenerateFile\n     */\n    public boolean isRegenerateFile()\n    {\n        return this.regenerateFile;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    public String getLocalRepoProperty()\n    {\n        return localRepoProperty;\n    }\n\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n\n    public boolean isFileSepSet()\n    {\n        return isFileSepSet;\n    }\n\n    public void setFileSepSet( boolean isFileSepSet )\n    {\n        this.isFileSepSet = isFileSepSet;\n    }\n\n    public boolean isPathSepSet()\n    {\n        return isPathSepSet;\n    }\n\n    public void setPathSepSet( boolean isPathSepSet )\n    {\n        this.isPathSepSet = isPathSepSet;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (125, 129, '            else if ( arg2 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (126, 130, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (127, 131, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (128, 132, '            else if ( arg1 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (129, 133, '        if (outputFilterFile)\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (130, 134, '	            installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (131, 135, '				ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (132, 136, '				installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (133, 137, '		    installer.install( artifact.getFile(), baseArtifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (134, 138, '				ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (135, 139, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (136, 140, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (137, 141, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (138, 142, '        TreeTokens treeTokens = toTreeTokens( tokens );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (139, 143, '            this.overrideLocalRepository = artifactRepositoryManager.createArtifactRepository( \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (140, 144, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (141, 145, '            this.overrideLocalRepository = artifactRepositoryManager.createArtifactRepository( \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (142, 146, '        String output = results.getOutput( outputAbsoluteArtifactFilename, outputScope );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (143, 147, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (144, 148, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (145, 149, '                outputWriter = new FileWriter( outputFile );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (146, 150, '                outputFile.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (147, 151, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (148, 152, '            writer = new FileWriter( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (149, 153, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (150, 154, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (151, 155, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (152, 156, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (153, 157, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (154, 158, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (155, 159, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (156, 160, '        filter.addFilter( new ProjectTransitivityFilter( project.getDependencyArtifacts(), this.excludeTransitive ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (157, 161, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (158, 162, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (159, 163, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (160, 165, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (161, 166, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (162, 167, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (163, 168, '    {\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (164, 169, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (165, 170, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (166, 171, '        DependencyManagement depMgt = project.getDependencyManagement();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (167, 172, '        if ( cpFile != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (168, 173, '        File attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (169, 174, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (170, 175, '        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (171, 176, '        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (172, 177, '        if ( outputFilterFile )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (173, 178, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (174, 179, 'public class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     *\n     * @parameter expression=\"${mdep.stripVersion}\" default-value=\"false\"\n     * @parameter\n     */\n    private boolean stripVersion = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stipVersion parameter does nothing then).\n     *\n     * @parameter expression=\"${mdep.prefix}\"\n     */\n    private String prefix;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * This parameter is deprecated. Use outputFile instead.\n     * @parameter expression=\"${mdep.cpFile}\"\n     * @deprecated use outputFile instead\n     * @since 2.0\n     */\n    private File cpFile;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * @parameter expression=\"${mdep.outputFile}\"\n     */\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     *\n     * @parameter default-value=\"false\" expression=\"${mdep.regenerateFile}\"\n     */\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.fileSeparator}\"\n     */\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.pathSeparator}\"\n     */\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.localRepoProperty}\"\n     */\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     * @parameter default-value=false\n     */\n    boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     * @parameter default-value=false expression=\"${mdep.outputFilterFile}\"\n     */\n    boolean outputFilterFile;\n\n    /**\n     * Maven ProjectHelper\n     *\n     * @component\n     * @readonly\n     */\n    private MavenProjectHelper projectHelper;\n\n    boolean isFileSepSet = true;\n\n    boolean isPathSepSet = true;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates through calling copyArtifact.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getDependencies\n     * @see #copyArtifact(Artifact, boolean)\n     */\n    public void execute()\n        throws MojoExecutionException\n    {\n\n        if ( cpFile != null )\n        {\n            getLog().warn( \"The parameter cpFile is deprecated. Use outputFile instead.\" );\n            this.outputFile = cpFile;\n        }\n\n        // initialize the separators.\n        isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        //don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n\n        StringBuffer sb = new StringBuffer();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( (Artifact) i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        //make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\\n\" + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpdToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified stringBuffer.\n     *\n     * @param art\n     * @param sb\n     */\n    protected void appendArtifactPath( Artifact art, StringBuffer sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @param cpString\n     * @return true if the specified classpath equals to that found inside the file, false otherwise (including when\n     *         file does not exists but new classpath does).\n     */\n    private boolean isUpdToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n        }\n        catch ( Exception ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \" + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * It stores the specified string into that file.\n     *\n     * @param cpString the string to be written into the file.\n     * @throws MojoExecutionException\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        //make sure the parent path exists.\n        out.getParentFile().mkdirs();\n\n        Writer w = null;\n        try\n        {\n            w = new BufferedWriter( new FileWriter( out ) );\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writting to classpath file \'\" + out + \"\': \"\n                + ex.toString(), ex );\n        }\n        finally\n        {\n            IOUtil.close( w );\n        }\n    }\n\n    /**\n     * Reads into a string the file specified by the mojo param \'outputFile\'. Assumes, the instance variable \'outputFile\' is not\n     * null.\n     *\n     * @return the string contained in the classpathFile, if exists, or null otherwise.\n     * @throws MojoExecutionException\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException(\n                                                \"The outputFile parameter cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuffer sb = new StringBuffer();\n        BufferedReader r = null;\n\n        try\n        {\n            r = new BufferedReader( new FileReader( outputFile ) );\n            String l;\n            while ( ( l = r.readLine() ) != null )\n            {\n                sb.append( l );\n            }\n\n            return sb.toString();\n        }\n        finally\n        {\n            IOUtil.close( r );\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than\n     *         <code>0</code> if this string is lexicographically less than the string argument; and a value greater\n     *         than <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getCpFile()\n    {\n        return this.outputFile;\n    }\n\n    /**\n     * @param theCpFile the outputFile to set\n     */\n    public void setCpFile( File theCpFile )\n    {\n        this.outputFile = theCpFile;\n    }\n\n    /**\n     * @return the fileSeparator\n     */\n    public String getFileSeparator()\n    {\n        return this.fileSeparator;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @return the pathSeparator\n     */\n    public String getPathSeparator()\n    {\n        return this.pathSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix()\n    {\n        return this.prefix;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @return the regenerateFile\n     */\n    public boolean isRegenerateFile()\n    {\n        return this.regenerateFile;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    public String getLocalRepoProperty()\n    {\n        return localRepoProperty;\n    }\n\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n\n    public boolean isFileSepSet()\n    {\n        return isFileSepSet;\n    }\n\n    public void setFileSepSet( boolean isFileSepSet )\n    {\n        this.isFileSepSet = isFileSepSet;\n    }\n\n    public boolean isPathSepSet()\n    {\n        return isPathSepSet;\n    }\n\n    public void setPathSepSet( boolean isPathSepSet )\n    {\n        this.isPathSepSet = isPathSepSet;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (175, 180, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (176, 181, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (177, 182, '                        (ArtifactRepositoryLayout) repositoryLayouts.get( \"default\" ),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (178, 183, '                ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (179, 184, '                installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (180, 185, '                installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (181, 186, '            installer.install( artifact.getFile(), baseArtifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (182, 187, '                        outputDirectory.toURL().toExternalForm(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (183, 188, '                ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (184, 189, '            project.getProperties().setProperty( artifact.getDependencyConflictId(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (185, 190, '            project.getProperties().setProperty( artifact.getDependencyConflictId(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (186, 191, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (187, 192, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (188, 193, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (189, 194, '            this.overrideLocalRepository =\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (190, 195, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (191, 196, '        Set<Artifact> artifacts = project.getArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (192, 197, '        String output = results.getOutput( outputAbsoluteArtifactFilename, outputScope );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (193, 198, '                outputWriter = new FileWriter( outputFile );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (194, 199, '                outputFile.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (195, 200, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (196, 201, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (197, 202, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (198, 203, '            writer = new FileWriter( file, append );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (199, 204, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (200, 205, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (201, 206, '            marker.setLastModified( ts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (202, 207, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (203, 208, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (204, 209, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (205, 210, '            unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (206, 211, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (207, 212, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (208, 213, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (209, 214, '            UnArchiver unArchiver;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (210, 215, '    /**\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (211, 216, '     * Does the actual copy of the file and logging.\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (212, 217, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (213, 218, '\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (214, 219, '     * @readonly\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (215, 221, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (216, 222, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (217, 223, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (218, 224, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (219, 225, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (220, 226, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (221, 227, '        if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (222, 228, '        if ( groupId != null && !\"\".equals( groupId ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (223, 229, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (224, 230, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (225, 231, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (226, 232, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (227, 233, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (228, 234, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (229, 235, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (230, 236, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (231, 237, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (232, 238, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (233, 239, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (234, 240, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (235, 241, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (236, 242, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (237, 243, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (238, 244, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (239, 245, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (240, 246, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (241, 247, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (242, 248, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (243, 249, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (244, 250, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (245, 251, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (246, 252, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (247, 253, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (248, 254, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (249, 255, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (250, 256, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (251, 257, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (252, 258, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (253, 259, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (254, 260, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (255, 261, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (256, 262, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (257, 263, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (258, 264, '            dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (259, 265, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (260, 266, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (261, 267, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (262, 268, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (263, 269, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (264, 270, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (265, 271, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (266, 272, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (267, 273, '    private class SystemScopeExcludeFilter\n        implements ArtifactFilter\n    {\n        public boolean include( Artifact artifact )\n        {\n            return !Artifact.SCOPE_SYSTEM.equals( artifact.getScope() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (268, 274, '    private class SnapshotsFilter\n        implements ArtifactFilter\n    {\n        public boolean include( Artifact artifact )\n        {\n            return artifact.isSnapshot();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (269, 275, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (270, 276, '        DependencyManagement depMgt = project.getDependencyManagement();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (271, 277, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (272, 279, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (273, 280, '\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (274, 281, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (275, 282, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (276, 283, '            w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (277, 285, '            r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (278, 286, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST,\n       defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n    \n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * This parameter is deprecated. Use outputFile instead.\n     *\n     * @since 2.0\n     * @deprecated use outputFile instead\n     */\n    @Parameter( property = \"mdep.cpFile\" )\n    private File cpFile;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n    \n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename.\n     * Will only be used if {@link #isStripVersion()} is {@code false}.\n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    protected boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    /**\n     * <i>not used in this goal</i>\n     */\n    @Parameter\n    protected boolean useJvmChmod = true;\n\n    /**\n     * <i>not used in this goal</i>\n     */\n    @Parameter\n    protected boolean ignorePermissions;\n\n    boolean isFileSepSet = true;\n\n    boolean isPathSepSet = true;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates through calling copyArtifact.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getDependencies\n     * @see #copyArtifact(Artifact, boolean)\n     */\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n\n        if ( cpFile != null )\n        {\n            getLog().warn( \"The parameter cpFile is deprecated. Use outputFile instead.\" );\n            this.outputFile = cpFile;\n        }\n\n        // initialize the separators.\n        isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        //don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        //make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            project.getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n        else if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\\n\" + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpdToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art\n     * @param sb\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @param cpString\n     * @return true if the specified classpath equals to that found inside the file, false otherwise (including when\n     *         file does not exists but new classpath does).\n     */\n    private boolean isUpdToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( Exception ex )\n        {\n            this.getLog().warn(\n                \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \" + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * It stores the specified string into that file.\n     *\n     * @param cpString the string to be written into the file.\n     * @throws MojoExecutionException\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        //make sure the parent path exists.\n        out.getParentFile().mkdirs();\n\n        Writer w = null;\n        try\n        {\n            w = new BufferedWriter( new FileWriter( out ) );\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writting to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n        finally\n        {\n            IOUtil.close( w );\n        }\n    }\n\n    /**\n     * Reads into a string the file specified by the mojo param \'outputFile\'. Assumes, the instance variable\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if exists, or null otherwise.\n     * @throws MojoExecutionException\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException(\n                \"The outputFile parameter cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        BufferedReader r = null;\n\n        try\n        {\n            r = new BufferedReader( new FileReader( outputFile ) );\n            String l;\n            while ( ( l = r.readLine() ) != null )\n            {\n                sb.append( l );\n            }\n\n            return sb.toString();\n        }\n        finally\n        {\n            IOUtil.close( r );\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than\n     *         <code>0</code> if this string is lexicographically less than the string argument; and a value greater\n     *         than <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getCpFile()\n    {\n        return this.outputFile;\n    }\n\n    /**\n     * @param theCpFile the outputFile to set\n     */\n    public void setCpFile( File theCpFile )\n    {\n        this.outputFile = theCpFile;\n    }\n\n    /**\n     * @return the outputProperty\n     */\n    public String getOutputProperty()\n    {\n        return this.outputProperty;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @return the fileSeparator\n     */\n    public String getFileSeparator()\n    {\n        return this.fileSeparator;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @return the pathSeparator\n     */\n    public String getPathSeparator()\n    {\n        return this.pathSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix()\n    {\n        return this.prefix;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @return the regenerateFile\n     */\n    public boolean isRegenerateFile()\n    {\n        return this.regenerateFile;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    public String getLocalRepoProperty()\n    {\n        return localRepoProperty;\n    }\n\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n\n    public boolean isFileSepSet()\n    {\n        return isFileSepSet;\n    }\n\n    public void setFileSepSet( boolean isFileSepSet )\n    {\n        this.isFileSepSet = isFileSepSet;\n    }\n\n    public boolean isPathSepSet()\n    {\n        return isPathSepSet;\n    }\n\n    public void setPathSepSet( boolean isPathSepSet )\n    {\n        this.isPathSepSet = isPathSepSet;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (279, 287, '        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (280, 289, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (281, 291, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (282, 292, '                          .mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (283, 293, '                outputWriter = new FileWriter( outputFile );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (284, 294, '        return recommendedVersion.compareTo( theVersion ) <= 0;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (285, 295, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (286, 296, '            writer = new FileWriter( file, append );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (287, 297, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (288, 298, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (289, 299, '            marker.setLastModified( ts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (290, 300, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (291, 301, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (292, 302, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (293, 303, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (294, 304, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (295, 305, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (296, 306, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (297, 307, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (298, 308, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (299, 309, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (300, 310, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (301, 311, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (302, 312, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (303, 313, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (304, 314, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (305, 315, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (306, 316, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (307, 317, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (308, 318, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (309, 319, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (310, 320, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (311, 321, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (312, 322, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (313, 323, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (314, 324, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (315, 325, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (316, 326, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (317, 327, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (318, 328, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (319, 329, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (320, 330, '            dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (321, 331, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (322, 332, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (323, 333, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (324, 334, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (325, 335, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (326, 336, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (327, 337, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (328, 338, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (329, 339, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (330, 340, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (331, 341, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (332, 342, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (333, 343, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (334, 344, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (335, 345, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (336, 346, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (337, 347, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (338, 348, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (339, 349, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (340, 350, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (341, 351, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (342, 352, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (343, 353, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (344, 354, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (345, 355, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (346, 356, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (347, 357, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (348, 358, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (349, 359, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (350, 360, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (351, 361, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (352, 362, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (353, 363, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (354, 364, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (355, 365, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (356, 366, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (357, 367, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (358, 368, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (359, 369, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (360, 370, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (361, 371, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (362, 372, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (363, 373, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (364, 374, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (365, 375, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (366, 376, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (367, 377, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (368, 378, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (369, 379, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (370, 380, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (371, 381, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (372, 382, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (373, 383, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (374, 384, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (375, 385, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (376, 386, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (377, 387, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (378, 388, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (379, 389, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (380, 390, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (381, 391, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (382, 392, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (383, 393, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (384, 394, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (385, 395, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (386, 396, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (387, 397, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (388, 398, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (389, 399, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (390, 400, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (391, 401, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (392, 402, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (393, 403, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (394, 404, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (395, 405, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (396, 406, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (397, 407, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (398, 408, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (399, 409, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (400, 410, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (401, 411, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (402, 412, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (403, 413, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (404, 414, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (405, 415, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (406, 416, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (407, 417, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (408, 418, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (409, 419, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (410, 420, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (411, 421, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (412, 422, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (413, 423, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (414, 424, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (415, 425, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (416, 426, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (417, 427, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (418, 428, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (419, 429, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (420, 430, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (421, 431, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (422, 432, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (423, 433, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (424, 434, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (425, 435, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (426, 436, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (427, 437, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (428, 438, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (429, 439, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (430, 440, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (431, 441, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (432, 442, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (433, 443, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (434, 444, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (435, 445, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (436, 446, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (437, 447, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (438, 448, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (439, 449, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (440, 450, '            dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (441, 451, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (442, 452, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (443, 453, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (444, 454, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (445, 455, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (446, 456, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (447, 457, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (448, 458, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (449, 459, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (450, 460, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (451, 461, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (452, 462, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (453, 463, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (454, 464, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (455, 465, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (456, 466, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (457, 467, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (458, 468, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (459, 469, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (460, 470, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (461, 471, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (462, 472, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (463, 473, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (464, 474, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (465, 475, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (466, 476, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (467, 477, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (468, 478, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (469, 479, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (470, 480, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (471, 481, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (472, 482, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (473, 483, '            dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (474, 484, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (475, 485, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (476, 486, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (477, 487, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (478, 488, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (479, 490, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (480, 491, '            unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (481, 492, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (482, 493, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (483, 494, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (484, 495, '     * \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (485, 496, '     */\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (486, 497, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (487, 498, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (488, 499, '        {\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (489, 500, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (490, 501, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (491, 502, '        DependencyManagement depMgt = project.getDependencyManagement();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (492, 503, '                Dependency depMgtDependency = (Dependency) mismatch.get( resolvedArtifact );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (493, 504, '                ArtifactVersion artifactVersion = new DefaultArtifactVersion( dependencyArtifact.getVersion() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (494, 505, '            logArtifacts( unusedDeclared, false );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (495, 506, '            ProjectDependencyAnalysis analysis = analyzer.analyze( project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (496, 507, '            ProjectDependencyAnalysis analysis = analyzer.analyze( project );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (497, 508, '            logArtifacts( usedUndeclared, true );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (498, 509, '        if ( \"pom\".equals( project.getPackaging() ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (499, 510, '        if ( \"pom\".equals( project.getPackaging() ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (500, 511, '        if ( !cpFile.isFile() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (501, 512, '        List artList = new ArrayList( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (502, 513, '            Writer w = new BufferedWriter( new FileWriter( cpFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (503, 514, '        if ( prefix == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (504, 515, '        if ( cpFile == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (505, 516, '        BufferedReader r = new BufferedReader( new FileReader( cpFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (506, 517, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (507, 518, 'public class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator\n{\n\n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     * \n     * @parameter expression=\"${stripVersion}\" default-value=\"false\"\n     * @parameter\n     */\n    private boolean stripVersion = false;\n\n    /**\n     * The prefix to preppend on each dependent artifact. If undefined, the\n     * paths refer to the actual files store in the local repository (the\n     * stipVersion parameter does nothing then).\n     * \n     * @parameter expression=\"${maven.dep.prefix}\"\n     */\n    private String prefix;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the\n     * classpath as [INFO].\n     * \n     * @parameter expression=\"${maven.dep.cpFile}\"\n     */\n    private File cpFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the\n     * classpath file.\n     * \n     * @parameter default-value=\"false\" expression=\"${maven.dep.regenerateFile}\"\n     */\n    private boolean regenerateFile;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates through\n     * calling copyArtifact.\n     * \n     * @throws MojoExecutionException\n     *             with a message if an error occurs.\n     * \n     * @see #getDependencies\n     * @see #copyArtifact(Artifact, boolean)\n     */\n    public void execute()\n        throws MojoExecutionException\n    {\n        Set artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List artList = new ArrayList( artifacts );\n\n        StringBuffer sb = new StringBuffer();\n        Iterator i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( (Artifact) i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append(File.pathSeparatorChar);\n                appendArtifactPath( (Artifact) i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        if ( cpFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\\n\" + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpdToDate( cpString ) )\n            {\n                storeClasspathFile( cpString );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writting classpath file \'\" + cpFile + \"\'.  No changes found.\" );\n            }\n        }\n    }\n\n    /**\n     * Appends the artifact path into the specified stringBuffer.\n     * \n     * @param art\n     * @param sb\n     */\n    protected void appendArtifactPath( Artifact art, StringBuffer sb )\n    {\n        if ( prefix == null )\n        {\n            sb.append( art.getFile() );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separatorChar );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old\n     * classpathFile.\n     * \n     * @param cpString\n     * @return true if the specified classpath equals to that found inside the\n     *         file, false otherwise (including when file does not exists but\n     *         new classpath does).\n     */\n    private boolean isUpdToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n        }\n        catch ( Exception ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + cpFile + \"\' for up-to-date check: \" + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * It stores the specified string into that file.\n     * \n     * @param cpString\n     *            the string to be written into the file.\n     * @throws MojoExecutionException\n     */\n    private void storeClasspathFile( String cpString )\n        throws MojoExecutionException\n    {\n        try\n        {\n            Writer w = new BufferedWriter( new FileWriter( cpFile ) );\n\n            try\n            {\n                w.write( cpString );\n\n                getLog().info( \"Written classpath file \'\" + cpFile + \"\'.\" );\n            }\n            catch ( IOException ex )\n            {\n                throw new MojoExecutionException( \"Error while writting to classpath file \'\" + cpFile + \"\': \"\n                    + ex.toString(), ex );\n            }\n            finally\n            {\n                w.close();\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while opening/closing classpath file \'\" + cpFile + \"\': \"\n                + ex.toString(), ex );\n        }\n    }\n\n    /**\n     * Reads into a string the file specified by the mojo param \'cpFile\'.\n     * Assumes, the instance variable \'cpFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if exists, or null\n     *         ortherwise.\n     * @throws MojoExecutionException\n     */\n    private String readClasspathFile()\n        throws IOException\n    {\n        if ( !cpFile.isFile() )\n        {\n            return null;\n        }\n        StringBuffer sb = new StringBuffer();\n        BufferedReader r = new BufferedReader( new FileReader( cpFile ) );\n\n        try\n        {\n            String l;\n            while ( ( l = r.readLine() ) != null )\n            {\n                sb.append( l );\n            }\n\n            return sb.toString();\n        }\n        finally\n        {\n            r.close();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern\n     * [group_id][artifact_id][version].\n     * \n     * @param arg1\n     *            first object\n     * @param arg2\n     *            second object\n     * @return the value <code>0</code> if the argument string is equal to\n     *         this string; a value less than <code>0</code> if this string is\n     *         lexicographically less than the string argument; and a value\n     *         greater than <code>0</code> if this string is lexicographically\n     *         greater than the string argument.\n     */\n    public int compare( Object arg1, Object arg2 )\n    {\n        if ( arg1 instanceof Artifact && arg2 instanceof Artifact )\n        {\n            if ( arg1 == arg2 )\n            {\n                return 0;\n            }\n            else if ( arg1 == null )\n            {\n                return -1;\n            }\n            else if ( arg2 == null )\n            {\n                return +1;\n            }\n\n            Artifact art1 = (Artifact) arg1;\n            Artifact art2 = (Artifact) arg2;\n\n            String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n            String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n            return s1.compareTo( s2 );\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (508, 519, '            else if ( arg2 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (509, 520, '            else if ( arg1 == null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (510, 521, '            if ( regenerateFile || !isUpdToDate( cpString ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (511, 522, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (512, 523, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (513, 524, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (514, 525, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (515, 526, '        if ( dependencyManagement != null && dependencyManagement.getDependencies() != null )\n        {\n            map = new HashMap();\n            for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )\n            {\n                Dependency d = (Dependency) i.next();\n\n                try\n                {\n                    VersionRange versionRange = VersionRange.createFromVersionSpec( d.getVersion() );\n                    Artifact artifact = artifactFactory.createDependencyArtifact( d.getGroupId(), d.getArtifactId(),\n                                                                                  versionRange, d.getType(), d\n                                                                                      .getClassifier(), d.getScope(), d\n                                                                                      .isOptional() );\n                    map.put( d.getManagementKey(), artifact );\n                }\n                catch ( InvalidVersionSpecificationException e )\n                {\n                    throw new MojoExecutionException( \"Unable to parse version\", e );\n                }\n            }\n        }\n        else\n        {\n            map = Collections.EMPTY_MAP;\n        }\n        return map;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (516, 527, '        results.logStatus( getLog(), outputAbsoluteArtifactFilename, outputScope );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (517, 528, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (518, 529, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (519, 530, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (520, 531, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (521, 532, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (522, 533, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (523, 534, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (524, 535, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (525, 536, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (526, 537, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (527, 538, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (528, 539, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (529, 540, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (530, 541, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (531, 542, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (532, 543, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (533, 544, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (534, 545, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (535, 546, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (536, 547, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (537, 548, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (538, 549, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (539, 550, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (540, 551, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (541, 552, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (542, 553, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (543, 554, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (544, 555, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (545, 556, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (546, 557, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (547, 558, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (548, 559, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (549, 560, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (550, 561, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (551, 562, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (552, 563, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (553, 564, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (554, 565, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (555, 566, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (556, 567, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (557, 568, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (558, 569, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (559, 570, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (560, 571, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (561, 572, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (562, 573, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (563, 574, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (564, 575, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (565, 576, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (566, 577, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (567, 578, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (568, 579, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (569, 580, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (570, 581, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (571, 582, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (572, 583, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (573, 584, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (574, 585, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (575, 586, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (576, 587, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (577, 588, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (578, 589, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (579, 590, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (580, 591, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (581, 592, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (582, 593, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (583, 594, '            UnArchiver unArchiver;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (584, 595, '     * Does the actual copy of the file and logging.\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (585, 596, '            unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (586, 597, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (587, 598, '    /**\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (588, 599, '\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (589, 601, '     * @readonly\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (590, 602, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (591, 603, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (592, 604, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (593, 605, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (594, 606, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (595, 607, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (596, 608, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (597, 609, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (598, 610, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (599, 611, '        if ( groupId != null && !\"\".equals( groupId ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (600, 612, '        if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (601, 613, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.local );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (602, 614, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (603, 615, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (604, 616, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (605, 617, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (606, 618, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (607, 619, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (608, 620, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (609, 621, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (610, 622, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (611, 623, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (612, 624, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (613, 625, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (614, 626, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (615, 627, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (616, 628, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (617, 629, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (618, 630, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (619, 631, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (620, 632, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (621, 633, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (622, 634, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (623, 635, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (624, 636, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (625, 637, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (626, 638, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out + \"\': \" + ex.toString(),\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (627, 639, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (628, 640, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (629, 641, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (630, 642, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (631, 643, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (632, 644, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (633, 645, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (634, 646, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (635, 647, '        List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (636, 648, '            dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (637, 649, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (638, 650, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (639, 651, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (640, 652, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (641, 653, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (642, 654, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (643, 655, '        return this.project;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (644, 656, '        if ( silent )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (645, 657, '            theLog.info( \"Copying \"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (646, 658, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (647, 660, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (648, 661, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (649, 662, '     * @parameter expression=\"${mdep.useSubDirectoryPerArtifact}\"\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (650, 663, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (651, 664, '     *\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (652, 665, '        MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (653, 666, '        DependencyManagement depMgt = project.getDependencyManagement();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (654, 667, '            reader = ReaderFactory.newXmlReader( project.getFile() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (655, 668, '            reader = ReaderFactory.newXmlReader( project.getFile() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (656, 669, '            w = new BufferedWriter( new FileWriter( out ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (657, 670, '        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (658, 671, '            r = new BufferedReader( new FileReader( outputFile ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (659, 672, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (660, 673, '            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (661, 674, '        if ( cpFile != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (662, 675, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (663, 676, 'public class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     *\n     * @parameter expression=\"${mdep.stripVersion}\" default-value=\"false\"\n     * @parameter\n     */\n    private boolean stripVersion = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stipVersion parameter does nothing then).\n     *\n     * @parameter expression=\"${mdep.prefix}\"\n     */\n    private String prefix;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * This parameter is deprecated. Use outputFile instead.\n     *\n     * @parameter expression=\"${mdep.cpFile}\"\n     * @deprecated use outputFile instead\n     * @since 2.0\n     */\n    private File cpFile;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     * @parameter expression=\"${mdep.outputFile}\"\n     */\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     *\n     * @parameter default-value=\"false\" expression=\"${mdep.regenerateFile}\"\n     */\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.fileSeparator}\"\n     */\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.pathSeparator}\"\n     */\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     * @parameter default-value=\"\" expression=\"${mdep.localRepoProperty}\"\n     */\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     * @parameter default-value=false\n     */\n    boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     * @parameter default-value=false expression=\"${mdep.outputFilterFile}\"\n     */\n    boolean outputFilterFile;\n\n    /**\n     * Maven ProjectHelper\n     *\n     * @component\n     * @readonly\n     */\n    private MavenProjectHelper projectHelper;\n\n    boolean isFileSepSet = true;\n\n    boolean isPathSepSet = true;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates through calling copyArtifact.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getDependencies\n     * @see #copyArtifact(Artifact, boolean)\n     */\n    public void execute()\n        throws MojoExecutionException\n    {\n\n        if ( cpFile != null )\n        {\n            getLog().warn( \"The parameter cpFile is deprecated. Use outputFile instead.\" );\n            this.outputFile = cpFile;\n        }\n\n        // initialize the separators.\n        isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        //don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<Artifact>( artifacts );\n\n        StringBuffer sb = new StringBuffer();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( (Artifact) i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        //make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\\n\" + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpdToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( project.getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified stringBuffer.\n     *\n     * @param art\n     * @param sb\n     */\n    protected void appendArtifactPath( Artifact art, StringBuffer sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @param cpString\n     * @return true if the specified classpath equals to that found inside the file, false otherwise (including when\n     *         file does not exists but new classpath does).\n     */\n    private boolean isUpdToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );\n        }\n        catch ( Exception ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \" + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * It stores the specified string into that file.\n     *\n     * @param cpString the string to be written into the file.\n     * @throws MojoExecutionException\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        //make sure the parent path exists.\n        out.getParentFile().mkdirs();\n\n        Writer w = null;\n        try\n        {\n            w = new BufferedWriter( new FileWriter( out ) );\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writting to classpath file \'\" + out + \"\': \"\n                + ex.toString(), ex );\n        }\n        finally\n        {\n            IOUtil.close( w );\n        }\n    }\n\n    /**\n     * Reads into a string the file specified by the mojo param \'outputFile\'. Assumes, the instance variable \'outputFile\' is not\n     * null.\n     *\n     * @return the string contained in the classpathFile, if exists, or null otherwise.\n     * @throws MojoExecutionException\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException(\n                                                \"The outputFile parameter cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuffer sb = new StringBuffer();\n        BufferedReader r = null;\n\n        try\n        {\n            r = new BufferedReader( new FileReader( outputFile ) );\n            String l;\n            while ( ( l = r.readLine() ) != null )\n            {\n                sb.append( l );\n            }\n\n            return sb.toString();\n        }\n        finally\n        {\n            IOUtil.close( r );\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than\n     *         <code>0</code> if this string is lexicographically less than the string argument; and a value greater\n     *         than <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getCpFile()\n    {\n        return this.outputFile;\n    }\n\n    /**\n     * @param theCpFile the outputFile to set\n     */\n    public void setCpFile( File theCpFile )\n    {\n        this.outputFile = theCpFile;\n    }\n\n    /**\n     * @return the fileSeparator\n     */\n    public String getFileSeparator()\n    {\n        return this.fileSeparator;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @return the pathSeparator\n     */\n    public String getPathSeparator()\n    {\n        return this.pathSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix()\n    {\n        return this.prefix;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @return the regenerateFile\n     */\n    public boolean isRegenerateFile()\n    {\n        return this.regenerateFile;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    public String getLocalRepoProperty()\n    {\n        return localRepoProperty;\n    }\n\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n\n    public boolean isFileSepSet()\n    {\n        return isFileSepSet;\n    }\n\n    public void setFileSepSet( boolean isFileSepSet )\n    {\n        this.isFileSepSet = isFileSepSet;\n    }\n\n    public boolean isPathSepSet()\n    {\n        return isPathSepSet;\n    }\n\n    public void setPathSepSet( boolean isPathSepSet )\n    {\n        this.isPathSepSet = isPathSepSet;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (664, 677, '        if ( outputFilterFile )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (665, 678, '        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (666, 679, '        projectHelper.attachArtifact( project, attachedFile, \"classpath\" );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (667, 680, '            installer.install( artifact.getFile(), baseArtifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (668, 681, '                        (ArtifactRepositoryLayout) repositoryLayouts.get( \"default\" ),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (669, 682, '                installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (670, 683, '                        outputDirectory.toURL().toExternalForm(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (671, 684, '                installer.install( artifact.getFile(), artifact, targetRepository );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (672, 685, '                ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (673, 686, '                ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (674, 687, '            project.getProperties().setProperty( artifact.getDependencyConflictId(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (675, 688, '            project.getProperties().setProperty( artifact.getDependencyConflictId(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (676, 689, '                if ( parent.list().length < 2 )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (677, 690, '                deleteTarget.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (678, 691, '                    {\n                        public boolean include( Artifact artifact )\n                        {\n                            return artifact.isSnapshot();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (679, 692, '                message += \"  \" + missingArtifact.getId() + \"\\n\";\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (680, 693, '        return recommendedVersion.compareTo( theVersion ) <= 0;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (681, 695, '        for ( MavenProject p : reactorProjects == null ? Collections.<MavenProject>emptyList() : reactorProjects )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (682, 696, '                artifactRepositoryManager.createArtifactRepository( local.getId(), url, local.getLayout(),\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (683, 697, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (684, 698, '            this.overrideLocalRepository =\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (685, 699, '        String output = results.getOutput( outputAbsoluteArtifactFilename, outputScope );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (686, 700, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (687, 701, '                outputWriter = new FileWriter( outputFile );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (688, 702, '            this.resolver.resolve( artifact, this.remotePluginRepositories, this.getLocal() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (689, 703, '                outputFile.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (690, 704, '            writer = new FileWriter( file, append );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (691, 705, '        file.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (692, 706, '            marker.setLastModified( ts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (693, 707, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (694, 708, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (695, 709, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (696, 710, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (697, 711, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (698, 712, '        Set<Artifact> results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (699, 713, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (700, 714, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (701, 715, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (702, 716, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (703, 717, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (704, 718, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (705, 719, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (706, 720, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (707, 721, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (708, 722, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (709, 723, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (710, 724, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (711, 725, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (712, 726, '        List<Artifact> artList = new ArrayList<>( artifacts );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (713, 727, '@Mojo( name = \"build-classpath\", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )\n// CHECKSTYLE_ON: LineLength\npublic class BuildClasspathMojo\n    extends AbstractDependencyFilterMojo\n    implements Comparator<Artifact>\n{\n\n    @Parameter( property = \"outputEncoding\", defaultValue = \"${project.reporting.outputEncoding}\" )\n    private String outputEncoding;\n    \n    /**\n     * Strip artifact version during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripVersion\", defaultValue = \"false\" )\n    private boolean stripVersion = false;\n\n    /**\n     * Strip artifact classifier during copy (only works if prefix is set)\n     */\n    @Parameter( property = \"mdep.stripClassifier\", defaultValue = \"false\" )\n    private boolean stripClassifier = false;\n\n    /**\n     * The prefix to prepend on each dependent artifact. If undefined, the paths refer to the actual files store in the\n     * local repository (the stripVersion parameter does nothing then).\n     */\n    @Parameter( property = \"mdep.prefix\" )\n    private String prefix;\n\n    /**\n     * A property to set to the content of the classpath string.\n     */\n    @Parameter( property = \"mdep.outputProperty\" )\n    private String outputProperty;\n\n    /**\n     * The file to write the classpath string. If undefined, it just prints the classpath as [INFO].\n     */\n    @Parameter( property = \"mdep.outputFile\" )\n    private File outputFile;\n\n    /**\n     * If \'true\', it skips the up-to-date-check, and always regenerates the classpath file.\n     */\n    @Parameter( property = \"mdep.regenerateFile\", defaultValue = \"false\" )\n    private boolean regenerateFile;\n\n    /**\n     * Override the char used between the paths. This field is initialized to contain the first character of the value\n     * of the system property file.separator. On UNIX systems the value of this field is \'/\'; on Microsoft Windows\n     * systems it is \'\\\'. The default is File.separator\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.fileSeparator\", defaultValue = \"\" )\n    private String fileSeparator;\n\n    /**\n     * Override the char used between path folders. The system-dependent path-separator character. This field is\n     * initialized to contain the first character of the value of the system property path.separator. This character is\n     * used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \':\';\n     * on Microsoft Windows systems it is \';\'.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.pathSeparator\", defaultValue = \"\" )\n    private String pathSeparator;\n\n    /**\n     * Replace the absolute path to the local repo with this property. This field is ignored it prefix is declared. The\n     * value will be forced to \"${M2_REPO}\" if no value is provided AND the attach flag is true.\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.localRepoProperty\", defaultValue = \"\" )\n    private String localRepoProperty;\n\n    /**\n     * Attach the classpath file to the main artifact so it can be installed and deployed.\n     *\n     * @since 2.0\n     */\n    @Parameter( defaultValue = \"false\" )\n    private boolean attach;\n\n    /**\n     * Write out the classpath in a format compatible with filtering (classpath=xxxxx)\n     *\n     * @since 2.0\n     */\n    @Parameter( property = \"mdep.outputFilterFile\", defaultValue = \"false\" )\n    private boolean outputFilterFile;\n\n    /**\n     * Either append the artifact\'s baseVersion or uniqueVersion to the filename. Will only be used if\n     * {@link #isStripVersion()} is {@code false}.\n     * \n     * @since 2.6\n     */\n    @Parameter( property = \"mdep.useBaseVersion\", defaultValue = \"true\" )\n    private boolean useBaseVersion = true;\n\n    /**\n     * Maven ProjectHelper\n     */\n    @Component\n    private MavenProjectHelper projectHelper;\n\n    @Component\n    private RepositoryManager repositoryManager;\n\n    /**\n     * Main entry into mojo. Gets the list of dependencies and iterates to create a classpath.\n     *\n     * @throws MojoExecutionException with a message if an error occurs.\n     * @see #getResolvedDependencies(boolean)\n     */\n    @Override\n    protected void doExecute()\n        throws MojoExecutionException\n    {\n        // initialize the separators.\n        boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );\n        boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );\n\n        // don\'t allow them to have absolute paths when they attach.\n        if ( attach && StringUtils.isEmpty( localRepoProperty ) )\n        {\n            localRepoProperty = \"${M2_REPO}\";\n        }\n\n        Set<Artifact> artifacts = getResolvedDependencies( true );\n\n        if ( artifacts == null || artifacts.isEmpty() )\n        {\n            getLog().info( \"No dependencies found.\" );\n        }\n\n        List<Artifact> artList = new ArrayList<>( artifacts );\n\n        StringBuilder sb = new StringBuilder();\n        Iterator<Artifact> i = artList.iterator();\n\n        if ( i.hasNext() )\n        {\n            appendArtifactPath( i.next(), sb );\n\n            while ( i.hasNext() )\n            {\n                sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );\n                appendArtifactPath( i.next(), sb );\n            }\n        }\n\n        String cpString = sb.toString();\n\n        // if file separator is set, I need to replace the default one from all\n        // the file paths that were pulled from the artifacts\n        if ( isFileSepSet )\n        {\n            // Escape file separators to be used as literal strings\n            final String pattern = Pattern.quote( File.separator );\n            final String replacement = Matcher.quoteReplacement( fileSeparator );\n            cpString = cpString.replaceAll( pattern, replacement );\n        }\n\n        // make the string valid for filtering\n        if ( outputFilterFile )\n        {\n            cpString = \"classpath=\" + cpString;\n        }\n\n        if ( outputProperty != null )\n        {\n            getProject().getProperties().setProperty( outputProperty, cpString );\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().debug( outputProperty + \" = \" + cpString );\n            }\n        }\n\n        if ( outputFile == null )\n        {\n            getLog().info( \"Dependencies classpath:\" + System.lineSeparator() + cpString );\n        }\n        else\n        {\n            if ( regenerateFile || !isUpToDate( cpString ) )\n            {\n                storeClasspathFile( cpString, outputFile );\n            }\n            else\n            {\n                this.getLog().info( \"Skipped writing classpath file \'\" + outputFile + \"\'.  No changes found.\" );\n            }\n        }\n        if ( attach )\n        {\n            attachFile( cpString );\n        }\n    }\n\n    /**\n     * @param cpString The classpath.\n     * @throws MojoExecutionException in case of an error.\n     */\n    protected void attachFile( String cpString )\n        throws MojoExecutionException\n    {\n        File attachedFile = new File( getProject().getBuild().getDirectory(), \"classpath\" );\n        storeClasspathFile( cpString, attachedFile );\n\n        projectHelper.attachArtifact( getProject(), attachedFile, \"classpath\" );\n    }\n\n    /**\n     * Appends the artifact path into the specified StringBuilder.\n     *\n     * @param art {@link Artifact}\n     * @param sb {@link StringBuilder}\n     */\n    protected void appendArtifactPath( Artifact art, StringBuilder sb )\n    {\n        if ( prefix == null )\n        {\n            String file = art.getFile().getPath();\n            // substitute the property for the local repo path to make the classpath file portable.\n            if ( StringUtils.isNotEmpty( localRepoProperty ) )\n            {\n                ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();\n                File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );\n\n                file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );\n            }\n            sb.append( file );\n        }\n        else\n        {\n            // TODO: add param for prepending groupId and version.\n            sb.append( prefix );\n            sb.append( File.separator );\n            sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,\n                                                            this.useBaseVersion, this.stripClassifier ) );\n        }\n    }\n\n    /**\n     * Checks that new classpath differs from that found inside the old classpathFile.\n     *\n     * @return true if the specified classpath equals the one found inside the file, false otherwise (including when\n     *         file does not exist but new classpath does).\n     */\n    private boolean isUpToDate( String cpString )\n    {\n        try\n        {\n            String oldCp = readClasspathFile();\n            return Objects.equals( cpString, oldCp );\n        }\n        catch ( IOException ex )\n        {\n            this.getLog().warn( \"Error while reading old classpath file \'\" + outputFile + \"\' for up-to-date check: \"\n                + ex );\n\n            return false;\n        }\n    }\n\n    /**\n     * Stores the specified string into that file.\n     *\n     * @param cpString the string to write into the file\n     */\n    private void storeClasspathFile( String cpString, File out )\n        throws MojoExecutionException\n    {\n        // make sure the parent path exists.\n        out.getParentFile().mkdirs();\n        \n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( Writer w =\n            new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )\n        {\n            w.write( cpString );\n            getLog().info( \"Wrote classpath file \'\" + out + \"\'.\" );\n        }\n        catch ( IOException ex )\n        {\n            throw new MojoExecutionException( \"Error while writing to classpath file \'\" + out,\n                                              ex );\n        }\n    }\n\n    /**\n     * Reads the file specified by the mojo param \'outputFile\' into a string. Assumes the field\n     * \'outputFile\' is not null.\n     * \n     * @return the string contained in the classpathFile, if it exists, or null otherwise\n     * @throws IOException in case of an error\n     */\n    protected String readClasspathFile()\n        throws IOException\n    {\n        if ( outputFile == null )\n        {\n            throw new IllegalArgumentException( \"The outputFile parameter \"\n                + \"cannot be null if the file is intended to be read.\" );\n        }\n\n        if ( !outputFile.isFile() )\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        String encoding = Objects.toString( outputEncoding, \"UTF-8\" );\n\n        try ( BufferedReader r =\n            new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )\n        {\n            for ( String line = r.readLine(); line != null; line = r.readLine() )\n            {\n                sb.append( line );\n            }\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Compares artifacts lexicographically, using pattern [group_id][artifact_id][version].\n     *\n     * @param art1 first object\n     * @param art2 second object\n     * @return the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code>\n     *         if this string is lexicographically less than the string argument; and a value greater than\n     *         <code>0</code> if this string is lexicographically greater than the string argument.\n     */\n    @Override\n    public int compare( Artifact art1, Artifact art2 )\n    {\n        if ( art1 == art2 )\n        {\n            return 0;\n        }\n        else if ( art1 == null )\n        {\n            return -1;\n        }\n        else if ( art2 == null )\n        {\n            return +1;\n        }\n\n        String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();\n        String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();\n\n        return s1.compareTo( s2 );\n    }\n\n    @Override\n    protected ArtifactsFilter getMarkedArtifactFilter()\n    {\n        return null;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile( File outputFile )\n    {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @param theOutputProperty the outputProperty to set\n     */\n    public void setOutputProperty( String theOutputProperty )\n    {\n        this.outputProperty = theOutputProperty;\n    }\n\n    /**\n     * @param theFileSeparator the fileSeparator to set\n     */\n    public void setFileSeparator( String theFileSeparator )\n    {\n        this.fileSeparator = theFileSeparator;\n    }\n\n    /**\n     * @param thePathSeparator the pathSeparator to set\n     */\n    public void setPathSeparator( String thePathSeparator )\n    {\n        this.pathSeparator = thePathSeparator;\n    }\n\n    /**\n     * @param thePrefix the prefix to set\n     */\n    public void setPrefix( String thePrefix )\n    {\n        this.prefix = thePrefix;\n    }\n\n    /**\n     * @param theRegenerateFile the regenerateFile to set\n     */\n    public void setRegenerateFile( boolean theRegenerateFile )\n    {\n        this.regenerateFile = theRegenerateFile;\n    }\n\n    /**\n     * @return the stripVersion\n     */\n    public boolean isStripVersion()\n    {\n        return this.stripVersion;\n    }\n\n    /**\n     * @param theStripVersion the stripVersion to set\n     */\n    public void setStripVersion( boolean theStripVersion )\n    {\n        this.stripVersion = theStripVersion;\n    }\n\n    /**\n     * @param localRepoProperty {@link #localRepoProperty}\n     */\n    public void setLocalRepoProperty( String localRepoProperty )\n    {\n        this.localRepoProperty = localRepoProperty;\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (714, 728, '        out.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (715, 729, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (716, 730, '        return this.fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (717, 731, '        this.fileMappers = fileMappers;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (718, 732, '    @Parameter\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (719, 733, '        if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (720, 734, '    private class ModuleDescriptor\n    {\n        String name;\n\n        boolean automatic = true;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (721, 735, '        Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (722, 736, '            if ( plugins == null || plugins.isEmpty() )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (723, 737, '        file.getParentFile().mkdirs(); \n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (724, 738, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (725, 739, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (726, 740, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (727, 741, '            marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (728, 742, '      if (silent)\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (729, 746, '                artifactItem.setOutputDirectory( this.outputDirectory );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (730, 747, '                    artifactItem.setDoOverWrite( this.overWriteReleases );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (731, 748, '                    artifactItem.setDoOverWrite( this.overWriteSnapshots );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (732, 749, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (733, 750, '        Iterator iter = artifactItems.iterator();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (734, 751, '        Iterator iter = artifactItems.iterator();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (735, 752, '        DependencyUtil.unpackFile( artifact, location, this.markersDirectory, this.archiverManager,\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (736, 754, '        if (!excludeTransitive)\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (737, 755, '        if (groupId != null && !\"\".equals(groupId))\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (738, 756, '            Set plugins = DependencyUtil.resolvePluginArtifacts( project, factory, local,\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (739, 757, '                if ( !excludeTransitive )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (740, 758, '        if ( !silent )\n        {\n            log.info( \"\" );\n            log.info( \"The following files have been resolved: \" );\n            if ( resolvedArtifacts.isEmpty() )\n            {\n                log.info( \"   none\" );\n            }\n            else\n            {\n                for ( Iterator i = resolvedArtifacts.iterator(); i.hasNext(); )\n                {\n                    log.info( \"   \" + ( (Artifact) i.next() ).getId() );\n                }\n            }\n\n            if ( existingArtifacts != null && !existingArtifacts.isEmpty() )\n            {\n                log.info( \"\" );\n                log.info( \"The following files where skipped: \" );\n                for ( Iterator i = existingArtifacts.iterator(); i.hasNext(); )\n                {\n                    log.info( \"   \" + ( (Artifact) i.next() ).getId() );\n                }\n            }\n            log.info( \"\" );\n            log.info( \"The following files have NOT been resolved: \" );\n            if ( missingArtifacts.isEmpty() )\n            {\n                log.info( \"   none\" );\n            }\n            else\n            {\n                for ( Iterator i = missingArtifacts.iterator(); i.hasNext(); )\n                {\n                    log.info( \"   \" + ( (Artifact) i.next() ).getId() );\n                }\n            }\n            log.info( \"\" );\n        }\n    }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (741, 759, '                markerFile.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (742, 760, '        markersDirectory.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (743, 761, '      log.debug(\"Artifacts:\");\n      Iterator iter = artifacts.iterator();\n      while (iter.hasNext())\n      {\n          Artifact artifact = (Artifact) iter.next();\n          log.debug(\"\"+artifact);\n      }\n  }\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (744, 762, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (745, 763, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (746, 764, '            marker.createNewFile();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (747, 765, '        marker.getParentFile().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (748, 766, '                clearMarker.delete();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (749, 767, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (750, 768, '        Set results = artifacts;\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (751, 769, '            Artifact newArtifact = factory.createArtifactWithClassifier( artifact.getGroupId(), artifact\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (752, 770, '            location.mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (753, 771, '                unArchiver = archiverManager.getUnArchiver( file );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (754, 772, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (755, 773, '        catch ( Exception e )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (756, 774, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (757, 775, '    @Parameter( property = \"packaging\", defaultValue = \"jar\" )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (758, 776, '        if ( artifact != null )\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (759, 777, '            final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (760, 778, '                Set<Artifact> directDependencies = project.getDependencyArtifacts();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (761, 779, '            artifactItem.getOutputDirectory().mkdirs();\n');
INSERT INTO `violation_code` (`id`, `violation_id`, `snippet`) VALUES (762, 780, '        this.fileMappers = fileMappers;\n');
COMMIT;

-- ----------------------------
-- Table structure for violation_slice
-- ----------------------------
DROP TABLE IF EXISTS `violation_slice`;
CREATE TABLE `violation_slice` (
  `id` int NOT NULL AUTO_INCREMENT,
  `violation_id` int DEFAULT NULL,
  `snippet` text,
  `snapshot` text,
  PRIMARY KEY (`id`),
  KEY `violation_id` (`violation_id`),
  CONSTRAINT `violation_slice_ibfk_1` FOREIGN KEY (`violation_id`) REFERENCES `violation` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- ----------------------------
-- Records of violation_slice
-- ----------------------------
BEGIN;
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
